[{"id":"1","name":"Introduction\r","content":"<h2 id=\"introduction\">Introduction</h2>\n<p><img src=\"assets/dt-azure.png\" alt=\"image\" /></p>\n<p><a href=\"https://www.dynatrace.com\">Dynatrace</a> is an Azure Gold Cloud Platform Competency Partner. Dynatrace provides software intelligence to simplify enterprise cloud complexity and accelerate digital transformation. With AI and complete automation, the company’s all-in-one platform provides answers, not just data, about the performance of applications, the underlying infrastructure and the experience of all users.</p>\n<p>Dynatrace has pioneered and expanded the collection of observability data in highly dynamic cloud environments with the Dynatrace OneAgent. When an organization installs the OneAgent, it automatically detects all applications, containers, services, processes, and infrastructure in real-time with zero manual configuration or code changes. System components are automatically instrumented collect not only metrics, logs and traces, but a broader view of your environment including full topological model with entity relationships, code-level detail, and user experience – all in context.</p>\n<h2 id=\"workshoplearningobjectives\">Workshop Learning Objectives</h2>\n<p>This virtual hands-on workshop will start with a review of common challenges associated with modernization followed by a review of how Dynatrace’s AI-engine, Davis, performs automatic and intelligent root-cause analysis in hybrid cloud Azure environments. This will be followed by series of hands-on labs where you will:</p>\n<ol>\n<li>Setup a Dynatrace environment and sample applications within Azure</li>\n<li>Jump in and fully analyze an application within Dynatrace</li>\n<li>Start to see and understand application usage patterns, infrastructure consumption, service dependencies, benchmarking performance and how service levels can be tightly ensured.</li>\n</ol>\n<p>You are now in the drivers seat for enabling modern operations for cloud native architectures!</p>\n<h2 id=\"workshopstructure\">Workshop structure</h2>\n<p>The workshop breaks down into three sections. Plan on 2-4 hours for completion of the lab section.</p>\n<ul>\n<li>Prerequisites - Ensure your Dynatrace and Azure accounts are set-up</li>\n<li>Workshop Labs - Divided into modules, some labs include a step to run scripts that will provision Azure resources, deploy sample application, and configure Dynatrace.</li>\n<li>Cleanup Resources - Tear down workshop resources and keep on using the Free Trial! ​</li>\n</ul>\n<p>By analyzing an application within Dynatrace, you’ll learn how to understand application usage patterns, infrastructure consumption, service dependencies, benchmarking performance and ensuring service levels, and enabling modern operations for cloud native architectures.</p>\n<p>Attendees can expect to learn the following from this workshop:​</p>\n<ul>\n<li>Common challenges associated with modernization​</li>\n<li>How to solve challenges of hybrid cloud with Dynatrace observability​</li>\n<li>Improve acceleration of cloud workload adoption of Azure​</li>\n</ul>\n<h2 id=\"workshopaudience\">Workshop Audience:</h2>\n<ul>\n<li>Application teams</li>\n<li>Architects</li>\n<li>Developers</li>\n<li>Technical leads</li>\n</ul>\n<h2 id=\"itwouldbehelpfulforyou\">It would be helpful for you:</h2>\n<ul>\n<li>Use a Dynatrace Managed environment provisioned for you.</li>\n<li>Use a non-corporate Azure subscription so that you don't have permission issues</li>\n<li>Use a personal email address when signing up for Azure Pass subscription in pre-requisites section</li>\n<li>Be able to run basic <a href=\"http://mally.stanford.edu/~sr/computing/basic-unix.html\">Unix commands</a></li>\n<li>Be familiar with basic <a href=\"https://azure.microsoft.com/en-us/overview/what-is-azure\">Azure cloud concepts</a></li>\n<li>Be familiar with <a href=\"https://azure.microsoft.com/en-us/overview/what-is-a-container/\">containerization concepts</a></li>\n<li>Please <strong>ASK QUESTIONS</strong> and <strong>INTERACT</strong></li>\n</ul>","activityList":[{"id":"1.1","name":"Forward\r","content":"<h2 id=\"forward\">Forward</h2>\n<h3 id=\"moderncloudenvironmentsneedadifferentapproachtoobservability\">Modern cloud environments need a different approach to observability</h3>\n<p>Conventional application performance monitoring (APM) emerged when applications were mostly monolithic and update cycles were measured in years, not days. Manual instrumentation and performance base lining, though cumbersome, were once adequate particularly since fault patterns were generally known and well understood.</p>\n<p>As monoliths get replaced by cloud-native applications, that are rapidly growing in size, traditional monitoring approaches are no longer enough. Rather than instrumenting for a predefined set of problems, enterprises need complete visibility into every single component of these dynamically scaling micro service environments. This includes multi-cloud infrastructures, container orchestration systems like Kubernetes, service meshes, functions-as-a-service and polyglot container payloads.</p>\n<p>Such applications are more complex and unpredictable than ever. System health problems are rarely well understood from the outset and IT teams spend a significant amount of time manually solving problems and putting out fires after the fact. The challenge with modern cloud environments is to address the unknown unknowns the kind of unique glitches that have never occurred in the past.</p>\n<p>Lets next review a few common challenges the are driving the need for better observability and automation as applications are modernizing.</p>","activityList":[]},{"id":"1.2","name":"Challenges\r","content":"<h2 id=\"challenges\">Challenges</h2>\n<p>Below are a few common challenges the are driving the need for better observability and automation as applications are modernizing.</p>\n<h2 id=\"challenge1understandingthelegacyapplication\">Challenge #1: Understanding the Legacy Application</h2>\n<p>First, we need to have a good overview of all hosts, processes, services and technologies so that we can answer the following key questions:</p>\n<ol>\n<li>Which technologies are in use and where do they run?</li>\n<li>Which technologies are legacy and can’t be moved because they are not supported?</li>\n<li>What is the big picture and end-to-end aggregate view of the legacy app services?</li>\n<li>Who is responsible and needs to be included in the discussion?</li>\n</ol>\n<p>In our current state, we anticipate this as a few weeks of effort by our developer and operations teams to inventory the hosts, technology and dependencies. Because our IT teams are distributed and siloed by function, it may take several meetings to review the new diagrams and spreadsheets, and we will have to assign a project manager to help coordinate and keep everyone on task. All of this takes valuable time from our already busy team.</p>\n<h2 id=\"challenge2understandingapplicationusagepatterns\">Challenge #2: Understanding application usage patterns</h2>\n<p>In addition to needing to understand the blueprint for the existing application and infrastructure landscape, we need to know how the end-user traffic patterns map to resource consumption patterns of the underlying services as to properly answer:</p>\n<ol>\n<li>What will it cost to run in the cloud?</li>\n<li>What network traffic will there be between the services we migrate and those that have to stay in the current data center?</li>\n<li>How can I make sense of all the spaghetti codes in the legacy app without reverse engineering miles of code and determining what service talks to what?</li>\n</ol>\n<p>Because we use multiple monitoring and logging tools, gathering and compiling all this data can be complex and will take time. What will likely happen is that some teams will lack the resources to take on this task resulting in low confidence in the resulting analysis.</p>\n<h2 id=\"challenge3makingdecisionfortheapplicationmigrationstrategy\">Challenge #3: Making decision for the application migration strategy</h2>\n<p>We want to balance the lower risk of just \"lifting and shifting\" versus benefits of the moving to new technology and the cost savings with on-demand and scalable Azure services.</p>\n<p>What is needed to answer is:</p>\n<ol>\n<li>What are the dependencies, complexity and which pieces are most important for each component and service?</li>\n<li>What are the underlying infrastructure components and dependencies?</li>\n<li>Where are the data repositories and what is the activity?</li>\n<li>Which KPI’s are the most relevant?</li>\n<li>What is the application usage patterns (mentioned above)?</li>\n</ol>\n<p>Much like the effort to gather application usage patterns, we anticipate this effort being laborious and requiring multiple teams to get involved. Again, adding more time and taking resources away from other work.</p>\n<p>Much like the effort to gather application usage patterns, we anticipate this effort being laborious and requiring multiple teams to get involved.  Again adding more time and taking resources away from other work.</p>\n<h2 id=\"challenge4benchmarkingperformanceandensuringservicelevels\">Challenge #4: Benchmarking performance and ensuring service levels</h2>\n<p>As mentioned above, we have a patchwork of tools with many of them focused on a single view:</p>\n<ul>\n<li>Just host monitoring</li>\n<li>Just logs</li>\n<li>Just website traffic</li>\n</ul>\n<p>There is no unified view across our current on-prem platforms let alone the cloud. As a result, we don’t know how the application and underlying services are behaving, and many of our current tools aren’t even suited to support cloud native, or new technologies like Kubernetes.</p>\n<p>At high level, we know we must first establish system benchmarks.  And then, during and post migration the following:</p>\n<ol>\n<li>Validate business outcomes</li>\n<li>Manage service levels real-time for full stack visibility of user experience, application and components</li>\n<li>Maintain single view of our hybrid cloud environment</li>\n</ol>\n<p>With our current set of tooling and manual approach to aggregate all the data, we simply will not be able to keep up with the demand.  This will result in blind spots and delays in gathering data and an increased risk to hurting services levels.  Just this past March, we had a major outage caused by a memory leak in the legacy code and we never saw it coming.</p>\n<h2 id=\"challenge5increasedcomplexityforoperations\">Challenge #5: Increased Complexity for Operations</h2>\n<p>The team has quickly learned that building out cloud infrastructure, where everything is virtualized and dynamic, causes interdependencies to go way up, adding more layers of complexity.</p>\n<p>The team understands that modernizing our legacy application to a Cloud native architecture will force a change to new way of operating in cloud. By decomposing the legacy application into small agile, autonomous applications adds complexity for operations. </p>\n<p>We need to both scale up our team’s ability to support all this new complexity AND minimize disruption during cloud migration and prevent delays but do so without adding a whole new set of resources.</p>\n<p>We are asking ourselves:</p>\n<ul>\n<li>Will one tool or multiple tools simplify operations ?</li>\n<li>How can we filter noisy incidents from the actual incident which require attention?</li>\n<li>How can we scale the team to support additional complexity without adding more staff?</li>\n</ul>\n<h2 id=\"beforewedigin\">Before we dig in …</h2>\n<p>Before we take a look at how Dynatrace can help us with these challenges.</p>","activityList":[]},{"id":"1.3","name":"Dynatrace and Azure\r","content":"<h2 id=\"dynatraceandazure\">Dynatrace and Azure</h2>\n<p>The <a href=\"https://docs.microsoft.com/en-us/azure/cloud-adoption-framework/\" target=\"_blank\">Azure Cloud Adoption Framework</a> provides the best practices, documentation, and tools that cloud architects, IT professionals, and business decision makers need to successfully achieve short-term and long-term objectives. </p>\n<p>The Azure cloud adoption framework frames this guidance into the <a href=\"https://docs.microsoft.com/en-us/azure/cloud-adoption-framework/\" target=\"_blank\">phases</a> shown below.</p>\n<ul>\n<li><p><strong>Strategy phase</strong> - Before we move, define and document our motivations to move to the cloud and define specific business outcomes we hope to achieve. We need to learn how to use the cloud to make your IT cost structure more flexible and build a business case to adopt the cloud. Lastly, we need to discover the technical flexibility, efficiencies, and capabilities that help you build a business case to adopt the cloud.</p></li>\n<li><p><strong>Plan phase</strong> - We need to perform a detailed application and infrastructure discovery and put a plan in place. We need to identify and put in place the right tools to help iron out the challenges of portfolio analysis, right sizing, application prioritization and application grouping.</p></li>\n<li><p><strong>Ready phases</strong> - It is critical that we accelerate our move to the cloud and application transformations to achieve the benefits, but we must also validate our architecture decisions and our performance and scalability benchmarks.</p></li>\n<li><p><strong>Adopt phase</strong> - Once migrated, it will start to get interesting with usage of all modern services, modern architectures using Azure Containers, AKS, Azure Functions, Azure CosmosDB and much more.  We know we need to adopt modern ways of operations by automating monitoring tasks, remediation tasks and ITSM tasks.  We must also continue to expand and optimize our costs and performance.</p></li>\n</ul>\n<p>Here is an overview for how <a href=\"https://www.dynatrace.com\" target=\"_blank\">Dynatrace</a> helps in each phase of our modernization journey.</p>\n<p><img src=\"assets/azure-cloud-adoption.png\" alt=\"image\" /></p>","activityList":[]},{"id":"1.4","name":"Overview\r","content":"<h2 id=\"overview\">Overview</h2>\n<p>The Evaluation Platform consists of two main components.</p>\n<ol>\n<li>A Dynatrace Tenant you'll create.  <a href=\"https://www.dynatrace.com/trial\">Trial tenants</a> are available to anyone on-demand.</li>\n<li>A standard \"Pay-as-you-go\" Azure tenant.  You'll have free reign over all components of the tenant during the evaluation window.  It's empty to start, but you'll add to it over the course of the labs using simple scripts you can check out any time.</li>\n</ol>\n<h3 id=\"objectives\">Objectives</h3>\n<p>We'll walk through the four main labs together.  You'll do each step on your own with guided help if you have any questions along the way.  You're free to explore the Azure tenant and your Dynatrace environment between the sessions until the conclusion fo the evaluation period.</p>\n<p>First Session</p>\n<ol>\n<li>(20m) Prerequisites- Spin up a free Dynatrace trial Tenant. Download the code respository used during the labs.  Provision a monolithic application and kubernetes cluster in Azure.  Confirm the application is running.</li>\n<li>(5m) Deploy the Oneagent on the monolith application.</li>\n<li>(20m) Lab 1- Check out what Dynatrace discovered, instrumented, and automatically started to monitor.  Given that the workshop can't deploy an enormous number of resources- we can check out the Dynatrace demo environment to see additional technologies and larger application ecosystems.  They deploy and auto-instrument the same as this workshop.</li>\n<li>(5m) Lab 2- Deploy the Kubernetes Operator.</li>\n<li>(20m) Lab 2- Check out the sample application in Dynatrace.  Similar to above we can use the Dynatrace demo environment if needed to show a larger ecosystem.</li>\n</ol>\n<p>Second Session</p>\n<ol>\n<li>Cover any questions from previous session or that came up from exploration.</li>\n<li>(5m) Overview of problem detection.</li>\n<li>(10m) Use scripts found in the downloaded repository to deploy new releases with defects to the Azure application code.</li>\n<li>(15m) Check out the problem card in Dynatrace.</li>\n</ol>\n<p>Third Session</p>\n<ol>\n<li>Cover any questions from previous session or that  came up from exploration.</li>\n<li>(5m) Overview of Azure Monitor.</li>\n<li>(10m) Custom Alerting and Slo's.</li>\n<li>(10m) Create an SLO dashboard.</li>\n</ol>\n<h3 id=\"helpfultips\">Helpful Tips</h3>\n<ul>\n<li>Make sure spam filters are off &amp; use an email account not already associted with dynatrace when signing up for tenant.</li>\n<li>Use a non-corporate Azure subscription so that you don't have permission issues</li>\n<li>Use a personal email address when signing up for Azure Pass subscription in pre-requisites section</li>\n<li>Be able to run basic <a href=\"http://mally.stanford.edu/~sr/computing/basic-unix.html\">Unix commands</a></li>\n<li>Be familiar with basic <a href=\"https://azure.microsoft.com/en-us/overview/what-is-azure\">Azure cloud concepts</a></li>\n<li>Be familiar with <a href=\"https://azure.microsoft.com/en-us/overview/what-is-a-container/\">containerization concepts</a></li>\n<li>Please <strong>ASK QUESTIONS</strong> and <strong>INTERACT</strong></li>\n</ul>","activityList":[]}]},{"id":"2","name":"Prerequisites & Setup\r","content":"<h2 id=\"prerequisitessetup\">Prerequisites &amp; Setup</h2>\n<p>We will now setup Dynatrace, Azure, and the workshop environment. You need all of these in place before you are presented with the lab excercises.</p>\n<h2 id=\"objectivesofthissection\">Objectives of this section</h2>\n<p>🔷 Setup your Dynatrace Tenant.</p>\n<p>🔷 Configure and log into your Azure tenant.</p>\n<p>🔷 Automatically provision workshop environment and sample application.</p>","activityList":[{"id":"2.1","name":"Dynatrace Environment\r","content":"<h2 id=\"dynatraceenvironment\">Dynatrace Environment</h2>\n<p>Open a browser to the <a href=\"http://www.dynatrace.com/trial\">Dynatrace Free</a> Trial page.</p>\n<p>Sign up for a trial account and find the Welcome email.  (Ensure you aren't blocking mail from dynatrace.com &amp; check your spam filters).</p>\n<p>Login to Dynatrace with your account email and new password.</p>\n<p>🏫<strong>Class Note</strong> - Please update the Tracking Spreadsheet if you've completed the task on this step.</p>","activityList":[]},{"id":"2.2","name":"Azure subscription\r","content":"<h2 id=\"azuresubscription\">Azure subscription</h2>\n<p>You should receive a welcome email to your Azure tenant from your Dynatrace team.  Locate this email, accept the invitation, and complete any steps necessary.</p>\n<p>Ensure you are able to log into the <a href=\"http://portal.azure.com\">Azure Portal</a> using this new account.</p>\n<p>Confirm there are no defined resource groups (beyond defaults), virtual machines, or existing kubernetes clusters.</p>\n<p>🏫<strong>Class Note</strong> - Please update the Tracking Spreadsheet if you've completed the task on this step.</p>","activityList":[]},{"id":"2.3","name":"Azure Prep\r","content":"<h2 id=\"azureprep\">Azure Prep</h2>\n<p>In the next sections, you will complete the following:</p>\n<ul>\n<li>Open Azure Cloud Shell for running various UNIX commands</li>\n<li>Capture environment and token info needed for automation scripts</li>\n<li>Provision sample application</li>\n<li>Verify sample application is running</li>\n</ul>\n<h2 id=\"taskstocompletethisstep\">Tasks to complete this step</h2>\n<p><details><summary>Task 1 - Open Azure Cloud Shell</summary></p>\n<ol>\n<li><p>Navigate to <a href=\"https://portal.azure.com/\" target=\"_blank\">https://portal.azure.com/ </a></p></li>\n<li><p>Click on the Cloud Shell button</p></li>\n</ol>\n<p><img src=\"assets/setup-azure-shell-open.png\" alt=\"image\" /></p>\n<p>If you get this prompt, choose bash</p>\n<p><img src=\"assets/setup-azure-shell-bash.png\" alt=\"image\" /></p>\n<p>If you get this prompt, choose <code>Azure Pass - Sponsorship</code> and then click the <code>Create Storage</code> button.</p>\n<p><img src=\"assets/setup-azure-shell-storage.png\" alt=\"image\" /></p>\n<h3 id=\"technicalnote\">💥 <strong>TECHNICAL NOTE</strong></h3>\n<p><em>Creating the storage will take about a minute.</em></p>\n<ol start=\"3\">\n<li>Once the storage is created, you should see the Unix bash shell.</li>\n</ol>\n<p><img src=\"assets/setup-azure-shell-prompt.png\" alt=\"image\" /></p>\n<ol start=\"4\">\n<li>Make a dedicated Azure shell Browser tab by clicking this new tab icon.</li>\n</ol>\n<p><img src=\"assets/setup-azure-shell-newtab.png\" alt=\"image\" />\n</details>\n<details>\n  <summary>Task 2 - Verify the subscription your're using </summary></p>\n<ul>\n<li>To verify which subscription is configured for the Azure CLI, run this command.</li>\n</ul>\n<pre><code class=\"hljs\">az account <span class=\"hljs-keyword\">show</span>\n</code></pre>\n<p>Look for the name in the output. Typically you'll see <em>Eval_Platform</em> for Dynatrace provided evaluation tenants.</p>\n<pre><code class=\"hljs\">{\n  <span class=\"hljs-string\">&quot;environmentName&quot;</span>: <span class=\"hljs-string\">&quot;AzureCloud&quot;</span>,\n  <span class=\"hljs-string\">&quot;homeTenantId&quot;</span>: <span class=\"hljs-string\">&quot;xxx-xxx-xxx-xx-xxx&quot;</span>,\n  <span class=\"hljs-string\">&quot;id&quot;</span>: <span class=\"hljs-string\">&quot;yyy-yyyy-yyy-yyy-yyy&quot;</span>,\n  <span class=\"hljs-string\">&quot;isDefault&quot;</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-string\">&quot;managedByTenants&quot;</span>: [],\n  <span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;Azure Pass - Sponsorship&quot;</span>,   &lt;----- This is the active subscription\n  <span class=\"hljs-string\">&quot;state&quot;</span>: <span class=\"hljs-string\">&quot;Enabled&quot;</span>,\n  <span class=\"hljs-string\">&quot;tenantId&quot;</span>: <span class=\"hljs-string\">&quot;zzz-zzz-zzz-zzz-zzz&quot;</span>,\n  <span class=\"hljs-string\">&quot;user&quot;</span>: {\n    <span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;name@company.com&quot;</span>,\n    <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;user&quot;</span>\n  }\n}\n</code></pre>\n<h3 id=\"technicalnote-1\">💥 <strong>TECHNICAL NOTE</strong></h3>\n<p>If the subscription is not <code>Eval_Platform</code>, run this command to see all the subscriptions for your user id. If this is the first time using Azure portal or a trial, then you should only have one subscription.</p>\n<pre><code class=\"hljs\">az account <span class=\"hljs-meta\">list</span> --<span class=\"hljs-meta\">output</span> <span class=\"hljs-meta\">table</span>\n</code></pre>\n<p>Here is an example output:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-type\">Name</span>                                     CloudName    SubscriptionId                        State    IsDefault\n<span class=\"hljs-comment\">---------------------------------------  -----------  ------------------------------------  -------  -----------</span>\n<span class=\"hljs-keyword\">Subscription</span> <span class=\"hljs-number\">1</span>                           AzureCloud   aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa  Enabled  <span class=\"hljs-keyword\">False</span>\n<span class=\"hljs-keyword\">Subscription</span> <span class=\"hljs-number\">2</span>                           AzureCloud   bbbbbbbb-aaaa-aaaa-aaaa-aaaaaaaaaaaa  Enabled  <span class=\"hljs-keyword\">False</span>\n<span class=\"hljs-keyword\">Subscription</span> <span class=\"hljs-number\">3</span>                           AzureCloud   cccccccc-aaaa-aaaa-aaaa-aaaaaaaaaaaa  Enabled  <span class=\"hljs-keyword\">False</span>\n<span class=\"hljs-keyword\">Subscription</span> <span class=\"hljs-number\">4</span>                           AzureCloud   dddddddd-aaaa-aaaa-aaaa-aaaaaaaaaaaa  Enabled  <span class=\"hljs-keyword\">False</span>\nEval_Platform                            AzureCloud   eeeeeeee-aaaa-aaaa-aaaa-aaaaaaaaaaaa  Enabled  <span class=\"hljs-keyword\">True</span>\n</code></pre>\n<p>If the <code>Eval_Platform</code> is not the <code>IsDefault = True</code>, then run these command to set and verify.</p>\n<pre><code class=\"hljs bash language-bash\"><span class=\"hljs-comment\"># set the subscription</span>\naz account <span class=\"hljs-built_in\">set</span> --subscription &lt;YOUR PROMO SUBSCRIPTION ID&gt;\n\n<span class=\"hljs-comment\"># verify change</span>\naz account list --output table\n\n<span class=\"hljs-comment\"># double check with</span>\naz account show\n</code></pre>\n<p></details>\n<details>\n  <summary>Task 3 - Clone the workshop scripts </summary></p>\n<ul>\n<li>Change directory into your cloud drive.</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\"><span class=\"hljs-built_in\">cd</span> ./clouddrive\n</code></pre>\n<ul>\n<li>Within your Azure Cloud Shell window, run this command to download the workshop scripts:</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">  git <span class=\"hljs-built_in\">clone</span> https://github.com/suchcodewow/modern-azure-dt-saas\n</code></pre>\n<ul>\n<li>To validate all the workshops scripts have download, please run these commands within the Azure Cloud Shell window to display the directories</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\"><span class=\"hljs-built_in\">cd</span> modern-azure-dt-saas\nls -al\n</code></pre>\n<p>You should see an output similar to the one below\n <img src=\"assets/pre-requisites-azure-cli-gitcloneoutput.png\" alt=\"image\" />\n</details></p>\n<p>🏫<strong>Class Note</strong> - Please update the Tracking Spreadsheet if you've completed the task on this step.</p>","activityList":[]},{"id":"2.4","name":"Provision the workshop\r","content":"<h2 id=\"provisiontheworkshop\">Provision the workshop</h2>\n<p>This step will automatically provision several Azure resources and Dynatrace configuration needed for the workshop via a shell script.  </p>\n<p>The process to provision everything will take ~15 minutes.</p>\n<h2 id=\"whatexactlyisthisscriptdoing\">What exactly is this script doing?</h2>\n<p>1 . Add Azure resources</p>\n<ul>\n<li>Add a Resource Group for all the VMs named: <code>dynatrace-azure-modernize-workshop</code></li>\n<li>Add Service Principal: <code>dynatrace-azure-modernize-workshop-sp</code> needed for the Azure monitor integration.</li>\n<li>Add VM named: <code>dt-orders-monolith</code>. At startup, it installs Docker and the Dynatrace Orders application in the Monolith configuration. OneAgent is installed using Azure extension</li>\n<li>Add VM named: <code>dt-orders-active-gate</code>. At startup, it installs the Dynatrace ActiveGate process needed for the Azure monitor integration.</li>\n<li>Add Azure Kubernetes Cluster named <code>dynatrace-workshop-cluster</code>.</li>\n</ul>\n<p>2 . Set Dynatrace configuration</p>\n<ul>\n<li>Set global <a href=\"https://www.dynatrace.com/support/help/how-to-use-dynatrace/problem-detection-and-analysis/problem-detection/detection-of-frequent-issues/\">Frequent Issue Detection</a> settings to Off</li>\n<li>Adjust the <a href=\"https://www.dynatrace.com/support/help/how-to-use-dynatrace/problem-detection-and-analysis/problem-detection/how-to-adjust-the-sensitivity-of-problem-detection/\">Service Anomaly Detection</a> global settings to a fixed error threshold</li>\n<li>Add <a href=\"https://www.dynatrace.com/support/help/how-to-use-dynatrace/management-zones/\">Management Zones</a> for the monolith and micro services versions of the application</li>\n<li>Add <a href=\"https://www.dynatrace.com/support/help/how-to-use-dynatrace/tags-and-metadata/\">Auto Tagging Rules</a> to drive management zone and SLO settings</li>\n<li>Add <a href=\"https://www.dynatrace.com/support/help/how-to-use-dynatrace/service-level-objectives/\">SLOs</a> for a use in custom dashboards</li>\n<li>Add <a href=\"https://www.dynatrace.com/support/help/technology-support/cloud-platforms/microsoft-azure-services/set-up-integration-with-azure-monitor/\">Azure Monitor Integration</a></li>\n</ul>\n<h3 id=\"technicalnote\">💥 <strong>TECHNICAL NOTE</strong></h3>\n<p><em>The Dynatrace configuration scripts use a combination of <a href=\"https://github.com/dynatrace-oss/dynatrace-monitoring-as-code\">Dynatrace Monitoring as Code</a> framework (a.k.a. monaco) and the <a href=\"https://www.dynatrace.com/support/help/dynatrace-api/configuration-api/\">Dynatrace Configuration API</a> for those few Dynatrace configurations not yet supported by monaco.</em></p>\n<h2 id=\"taskstocompletethisstep\">Tasks to complete this step</h2>\n<p><details>\n<summary>Task 1 - Run the Provisioning Script in Azure Cloud Shell</summary></p>\n<ul>\n<li>In your cloud shell go into the workshop folder.</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\"><span class=\"hljs-built_in\">cd</span> ~/clouddrive/modern-azure-dt-saas/workshop\n</code></pre>\n<ul>\n<li>Run the init script.</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">./init.sh\n</code></pre>\n<ul>\n<li>When prompted for tenant ID, switch to your Dynatrace window, copy the main URL, and paste it into this field.<br />\n<img src=\"assets/provision_URL.png\" alt=\"image\" /></li>\n</ul>\n<p>To connect applications, Dynatrace uses standard API tokens and offers a robust REST API.</p>\n<ul>\n<li><p>Follow these steps when prompted for the token.</p></li>\n<li><p>Select <em>Access tokens</em> near the bottom of the Dynatrace menu.<br />\n<img src=\"assets/pre_req_tokens.png\" alt=\"image\" /></p></li>\n<li><p>Click <em>generate new token</em>.<br />\n<img src=\"assets/prereq_gen.png\" alt=\"image\" /></p></li>\n<li><p>Name your token, then search for <em>config</em> select both read and write.<br />\n<img src=\"assets/prereq_search.png\" alt=\"image\" /></p></li>\n<li><p>Add read SLO, Write SLO, Read Configuration, Write Configuration, PaaS integration - Installer download, PaaS - Support Alert, Access problem and event feed, metrics, and topology</p></li>\n<li><p>The Dynatrace API shows you a command that could be automated to generate tokens going forward.</p></li>\n<li><p>Click <em>Generate token</em> at the bottom, then copy your token into the init script prompt.</p></li>\n<li><p>Enter your email address when prompted.</p></li>\n<li><p>As part of the larger Dynatrace Azure Active Directory, accounts in this tenant cannot generate service principals.  When prompted, copy and paste the json block provided.</p></li>\n</ul>\n<p></details>\n<details>\n<summary>Task 2 - Check status so far</summary></p>\n<ul>\n<li>Use the status tool to verify your setup info was saved successfully.</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">./status.sh\n</code></pre>\n<p>It is normal for some components to not be available yet.</p>\n<p></details>\n<details>\n<summary>Task 3 - Deploy the monolith and kubernetes applications.</summary></p>\n<ul>\n<li>Run the provision script to deploy the resource group and applications.</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">./provision-workshop.sh\n</code></pre>\n<p></details>\n<details>\n<summary>Task 4 - Verify in Azure Portal</summary></p>\n<ol>\n<li>Go back to the window where you have the Azure Portal screen open</li>\n<li>Search for <code>Resource Groups</code> from the search bar at the top\n<img src=\"assets/pre-requisites-azure-portal-resources.png\" alt=\"image\" /></li>\n<li>Click on <code>Resource Groups</code>.  From the list of resource group select <code>dynatrace-azure-modernize-workshop</code>.</li>\n<li>Once you within the resource group, you will see all of the different types of resources we've automatically provisionined for this workshop\n<img src=\"assets/pre-requisites-azure-portal-resources-resourcelist.png\" alt=\"image\" /></li>\n</ol>","activityList":[]},{"id":"2.5","name":"Verify AKS Cluster is provisioned\r","content":"<h2 id=\"verifyaksclusterisprovisioned\">Verify AKS Cluster is provisioned</h2>\n<p>In this step we will verify if the Azure Kubernetes Service (AKS) Cluster was provisioned correctly. Also we will download the credentials to manage our AKS cluster via <code>kubectl</code> commands.</p>\n<p>The <a href=\"https://kubernetes.io/docs/reference/kubectl/overview/\" target=\"_blank\">kubectl</a> command line tool that lets you control Kubernetes clusters.  For details about each command, including all the supported flags and subcommands, see the <a href=\"https://kubernetes.io/docs/reference/kubectl/overview/\" target=\"_blank\">kubectl</a> reference documentation.</p>\n<h2 id=\"taskstocompletethisstep\">Tasks to complete this step</h2>\n<p><details><summary>Task  - Azure CLI Verification</summary></p>\n<p>Only proceed if the provisioning script completes, and looks like this:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-bullet\">...\n</span><span class=\"hljs-section\">...\n=============================================</span>\n<span class=\"hljs-section\">Provisioning workshop resources COMPLETE\n=============================================</span>\n</code></pre>\n<h2 id=\"verifyclusterusingkubectlinazurecloudshell\">Verify Cluster using kubectl in Azure Cloud Shell</h2>\n<p>Once the provisioning script is complete, you can verify the new cluster with this kubectl command.</p>\n<ol>\n<li><p>Run this command in Azure Cloud shell to get familiar with the command line options for kubectl.</p>\n<pre><code class=\"hljs\">kubectl <span class=\"hljs-comment\">--help</span>\n</code></pre></li>\n<li><p>Use the <code>./status.sh</code> tool to add the kubernetes config and credentials to your shell.  You should see a new line appear similar to below. </p>\n<pre><code class=\"hljs\">Merged <span class=\"hljs-string\">&quot;dynatrace-xxxxxxx-cluster&quot;</span> as current context <span class=\"hljs-keyword\">in</span> <span class=\"hljs-regexp\">/home/</span>name<span class=\"hljs-regexp\">/.kube/</span>config\n</code></pre></li>\n<li><p>Verify you are connected.  You should see <code>dynatrace-workshop-cluster</code> as the output.</p>\n<pre><code class=\"hljs\">kubectl <span class=\"hljs-built_in\">config</span> current-<span class=\"hljs-built_in\">context</span>\n</code></pre></li>\n<li><p>List the nodes in the cluster</p>\n<pre><code class=\"hljs\">kubectl <span class=\"hljs-builtin-name\">get</span> nodes\n</code></pre>\n<p>The output should look like this:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-attribute\">NAME</span>                                STATUS   ROLES   AGE   VERSION\n<span class=\"hljs-attribute\">aks</span>-nodepool<span class=\"hljs-number\">1</span>-<span class=\"hljs-number\">74092643</span>-vmss<span class=\"hljs-number\">000000</span>   Ready    agent   <span class=\"hljs-number\">21</span>h   v<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">19</span>.<span class=\"hljs-number\">11</span>\n<span class=\"hljs-attribute\">aks</span>-nodepool<span class=\"hljs-number\">1</span>-<span class=\"hljs-number\">74092643</span>-vmss<span class=\"hljs-number\">000001</span>   Ready    agent   <span class=\"hljs-number\">21</span>h   v<span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">19</span>.<span class=\"hljs-number\">11</span>\n</code></pre>\n<p>You can see even more detail with this command.</p>\n<pre><code class=\"hljs\"><span class=\"hljs-attribute\">kubectl describe nodes</span>\n</code></pre>\n<p></details>\n<details><summary>Task  - Optional Verification via Azure Portal </summary></p></li>\n</ol>\n<h2 id=\"verifyclusterwithinazureportal\">Verify Cluster within Azure Portal</h2>\n<p>With the Azure web portal, search for the kubernetes services and then click on the new workshop cluster.</p>\n<p><img src=\"assets/setup-k8.png\" alt=\"image\" /></p>\n<p>Explore the configuration to view the number of nodes and the kubernetes version.</p>\n<p><img src=\"assets/setup-k8-node.png\" alt=\"image\" />\n</details></p>\n<p>🏫<strong>Class Note</strong> - Please update the Tracking Spreadsheet if you've completed the task on this step.</p>","activityList":[]},{"id":"2.6","name":"Summary\r","content":"<h2 id=\"summary\">Summary</h2>\n<p>In this section, you should have completed the following:</p>\n<p>✅ Provisioned a Dynatrace tenant and Azure subscription</p>\n<p>✅ Setup the Azure Cloud Shell to run various UNIX commands</p>\n<p>✅ Captured environment and token info needed for workshop provisioning automation scripts</p>\n<p>✅ Provisioned workshop resources</p>\n<p>🏫<strong>Class Note</strong> - Please update the Tracking Spreadsheet if you've completed the task on this step.</p>","activityList":[]}]},{"id":"3","name":"Lab 1 - OneAgent Observability\r","content":"<h2 id=\"lab1oneagentobservability\">Lab 1 - OneAgent Observability</h2>\n<p>While choosing the right migration strategies, such as re-hosting or re-architecting, one must assess the different risks, costs, and benefits. However, often the details of what is where and what is dependent on what within the technical stack is missing or poorly documented.  All that may exist is out of date diagrams and a mix of monitoring tool metrics that must be \"stiched\" together.</p>\n<p>Not having enough details about the current environment is hindering organizations ability to make the right decisions when planning what to migrate and when.</p>\n<p>To address this problem, Dynatrace’s OneAgent can automatically discover the application, services, processes and to build a complete dependency mapping for the entire application environment. So, let’s begin!</p>\n<h2 id=\"objectivesofthislab\">Objectives of this Lab</h2>\n<p>🔷 Review Dynatrace OneAgent</p>\n<p>🔷 Review real-time data now available for the sample application</p>\n<p>🔷 Review how Dynatrace helps with modernization planning</p>\n<p>🏫<strong>Class Note</strong> - Please update the Tracking Spreadsheet if you've completed the task on this step.</p>","activityList":[{"id":"3.1","name":"Lab Setup\r","content":"<h2 id=\"labsetup\">Lab Setup</h2>\n<p>Referring to the picture below, here are the components for lab 1.</p>\n<p><strong>#1 . Sample Application</strong></p>\n<p>Sample app representing a simple architecture of a frontend and backend implemented as Docker containers that we will review in this lab.</p>\n<p><strong>#2 . Dynatrace monitoring</strong></p>\n<p>The Dynatrace OneAgent has been installed by the workshop provisioning scripts and is communicating to your Dynatrace tenant.</p>\n<p><strong>#3 . Load generator process</strong></p>\n<p>A docker processes that sends simulated user traffic to the sample app using <a href=\"https://github.com/dt-orders/load-traffic\" target=\"_blank\"> Jmeter </a> run within a Docker container.  You will not need to interact with this container; it just runs in the background.</p>\n<p><img src=\"assets/lab1-setup.png\" alt=\"image\" /></p>\n<h2 id=\"technicalnote\">💥 <strong>TECHNICAL NOTE</strong>:</h2>\n<p><em>A real-world scenario would often start with the application components running on a physical or virtualized host in on-prem and not \"Dockerized\". To simplify the workshop, we \"Dockerized\" the application into a front-end and back-end. In Dynatrace, these Docker containers all show up as \"processes\" on a host just like a \"non-Dockerized\" application will.</em></p>","activityList":[]},{"id":"3.2","name":"OneAgent\r","content":"<h2 id=\"oneagent\">OneAgent</h2>\n<p>In this step, we'll use the Dynatrace Hub to deploy Oneagent to the application.\n<details>\n<summary>Task 1 - Deploy Oneagent</summary></p>\n<ol>\n<li>Choose the <code>Hub</code> option from the left side menu to open the OneAgent deployment page.  </li>\n</ol>\n<p><img src=\"assets/lab1-dynatrace-hub.png\" alt=\"image\" /></p>\n<ol>\n<li>Pick the <code>OneAgent</code> under the <code>Start monitoring</code> section, then click the <code>Download Agent</code> at the bottom of the page to open the <code>Download agent</code> page.</li>\n</ol>\n<p><img src=\"assets/lab1-deploy-dynatrace.png\" alt=\"image\" /></p>\n<ol>\n<li>On the <code>Download agent</code> page, pick the platform <code>Linux</code> to view the commands will download and run the OneAgent installer.</li>\n</ol>\n<p><img src=\"assets/lab1-download-dynatrace.png\" alt=\"image\" /></p>\n<ol>\n<li>Create a token.</li>\n<li>Enter <code>dt-orders-monolith</code> in the host group box.</li>\n<li>Log in to the monolith server using the credentials shown in <code>./status.sh</code>.</li>\n<li>Copy and paste the download link into the server terminal.  Hang tight for a second.</li>\n<li>Copy and paste the installer link making sure to manually enter <code>sudo</code> first to gain elevated permissions.  Wait a minute for install to complete.</li>\n</ol>\n<p><img src=\"assets/oneagent_deploy.png\" alt=\"image\" /></p>\n<ol>\n<li>Return to the <code>Download agent</code> page and if interested to review other options like Windows or Kubernetes.\n</details>\n<details>\n<summary>Task 2 - Recycle services to enable code level instrumentation</summary>\nDynatrace automatically detects and enables monitoring for most system components.  To instrument Dynatrace into the code, log in the monolith application server.</li>\n</ol>\n<ul>\n<li>You can use <code>./status.sh</code> to find the credentials.</li>\n<li>Stop the Application services.</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">sudo ./azure-modernization-dt-orders-setup/app-scripts/stop-monolith.sh\n</code></pre>\n<ul>\n<li>When the components stop, restart them.</li>\n</ul>\n<pre><code class=\"hljs bash language-bash\">sudo ./azure-modernization-dt-orders-setup/app-scripts/start-monolith.sh\n</code></pre>\n<p></details>\n<details>\n<summary>Task 3 - Review OneAgent Status for Monolith VM</summary></p>\n<ol>\n<li><p>Login into Dynatrace UI</p></li>\n<li><p>Choose the <code>Manage --&gt; Deployment Status</code> option from the left side menu to open the OneAgent deployment page.</p></li>\n<li><p>Check to enssure the <code>dt-orders-monolith</code> VM is reporting in under OneAgents</p></li>\n</ol>\n<p><img src=\"assets/lab1-deployment-status.png\" alt=\"image\" /></p>\n<p></details></p>\n<h3 id=\"installationwithazureextensions\">Installation with Azure extensions</h3>\n<p>The host running the sample application was created using scripts to install and run the Sample Application and to install the Dynatrace OneAgent. All these scripts you can review <a href=\"https://github.com/dt-alliances-workshops/azure-modernization-dt-orders-setup.git\" target=\"_blank\"> here </a> within the <code>provision-scripts</code> subfolder.</p>\n<p>The Dynatrace OneAgent was also preinstalled and is sending data to your Dynatrace environment using the <a href=\"https://www.dynatrace.com/support/help/technology-support/cloud-platforms/microsoft-azure-services/oneagent-integration/integrate-oneagent-on-azure-virtual-machines/\" target=\"_blank\">Dynatrace OneAgent VM Extension for Azure </a></p>\n<p>The Azure CLI command for setting up the OneAgent VM extension looks like:</p>\n<pre><code class=\"hljs\">az vm extension <span class=\"hljs-built_in\">set</span> \\\n    -<span class=\"hljs-literal\">-publisher</span> dynatrace.ruxit \\\n    -<span class=\"hljs-literal\">-name</span> <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$AGENT</span>&quot;</span> \\\n    -<span class=\"hljs-literal\">-resource</span><span class=\"hljs-literal\">-group</span> <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$AZURE_RESOURCE_GROUP</span>&quot;</span> \\\n    -<span class=\"hljs-literal\">-subscription</span> <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$AZURE_SUBSCRIPTION</span>&quot;</span> \\\n    -<span class=\"hljs-literal\">-vm</span><span class=\"hljs-literal\">-name</span> <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$HOSTNAME</span>&quot;</span> \\\n    -<span class=\"hljs-literal\">-settings</span> <span class=\"hljs-string\">&quot;{\\&quot;</span>tenantId\\<span class=\"hljs-string\">&quot;:\\&quot;</span><span class=\"hljs-variable\">$DT_ENVIRONMENT_ID</span>\\<span class=\"hljs-string\">&quot;,\\&quot;</span>token\\<span class=\"hljs-string\">&quot;:\\&quot;</span><span class=\"hljs-variable\">$DT_PAAS_TOKEN</span>\\<span class=\"hljs-string\">&quot;, \\&quot;</span>server\\<span class=\"hljs-string\">&quot;:\\&quot;</span><span class=\"hljs-variable\">$DT_BASEURL</span>/api\\<span class=\"hljs-string\">&quot;, \\&quot;</span>hostGroup\\<span class=\"hljs-string\">&quot;:\\&quot;</span><span class=\"hljs-variable\">$HOSTGROUP_NAME</span>\\<span class=\"hljs-string\">&quot;}&quot;</span> \n</code></pre>","activityList":[]},{"id":"3.3","name":"Sample app\r","content":"<h2 id=\"sampleapp\">Sample app</h2>\n<p>The sample application is called Dynatrace Orders.  A more detailed overview can be found here - <a href=\"https://github.com/dt-orders/overview\">https://github.com/dt-orders/overview</a>.  All the source code can be found here - <a href=\"https://github.com/dt-orders\">https://github.com/dt-orders</a></p>\n<h2 id=\"taskstocompletethisstep\">Tasks to complete this step</h2>\n<p><details>\n<summary>Task 1 - Get the Public IP to the frontend of the Sample Application</summary></p>\n<ol>\n<li><p>Open up Azure console and open up the Virtual Machine page.  You can use the search feature as shown below.\n<img src=\"assets/lab1-azure-find-vm.png\" alt=\"image\" /></p></li>\n<li><p>Once on the Virtual Machine page, click on the VM named <code>dt-orders-monolith</code>.  You can explore details about this VM, but you will want to copy the public IP as shown below.\n<img src=\"assets/lab1-azure-get-public-ip.png\" alt=\"image\" />\n</details>\n<details></p></li>\n</ol>\n<p><summary>Task 2 - Navigate the Sample app in a Browser</summary></p>\n<ol>\n<li><p>To view the application, copy the public IP into a browser. It will look like this:\n<img src=\"assets/lab1-app.png\" alt=\"image\" /></p></li>\n<li><p>Use the menu on the home page to navigate around the application and notice the URL for key functionality.  You will see these URLs later as we analyze the application.</p></li>\n</ol>\n<ul>\n<li>Customer List = <code>customer/list.html</code></li>\n<li>Customer Detail - Each customer has a unique page = <code>customer/5.html</code></li>\n<li>Catalog List = <code>catalog/list.html</code></li>\n<li>Catalog Search Form = <code>catalog/searchForm.html</code></li>\n<li>Order List = <code>order/list.html</code></li>\n<li>Order Form = <code>order/form.html</code>\n</details></li>\n</ul>\n<p>🏫<strong>Class Note</strong> - Please update the Tracking Spreadsheet if you've completed the task on this step.</p>","activityList":[]},{"id":"3.4","name":"Host view\r","content":"<h2 id=\"hostview\">Host view</h2>\n<p>In the next few sections, you will review what the OneAgent automatically discovered for the host, services, processes, and the complete dependency mapping for the sample application.  </p>\n<h2 id=\"howthishelps\">👍 How this helps</h2>\n<p>As you plan your migration, each of these views will give insights into accessing the profile, consumption and dependencies to other systems and services.</p>\n<h2 id=\"taskstocompletethisstep\">Tasks to complete this step</h2>\n<p><details>\n<summary>Task - Review the Data on the Hosts screen </summary></p>\n<ul>\n<li><p>From the left-side menu in Dynatrace choose <code>Infrastructure -&gt; Hosts</code> then click on the host with the name <code>dt-orders-monolith</code>.</p></li>\n<li><p><img src=\"assets/lab1-hostlist.png\" alt=\"image\" /></p></li>\n<li><p>On host page, you will see basic infrastructure information for the host.</p></li>\n</ul>\n<ol>\n<li>Now expand the <code>Properties</code> section to see data about the host:</li>\n<li>Host resource metrics (CPU, memory)</li>\n<li>Host availability</li>\n<li>Discovered processes. In this case the front end is running Node.js and the backend is running Java in Apache Tomcat.  JMeter is running in Java providing the automated user interactions</li>\n</ol>\n<p><img src=\"assets/lab1-host-view.png\" alt=\"image\" />\n</details></p>","activityList":[]},{"id":"3.5","name":"About Smartscape\r","content":"<h3 id=\"aboutsmartscape\">About Smartscape</h3>\n<p>Enterprises have many hosts, services, and application that are ever changing. The ability to automatically discover and change as the environment changes is a key feature that Smartscape delivers.  </p>\n<p>Dynatrace's near real-time environment-topology visualization tool, Smartscape, is where Dynatrace's auto-discovery is delivered into a quick and efficient visualization of all the topological dependencies in your infrastructure, processes, and services.</p>\n<h2 id=\"howthishelps\">👍 How this helps</h2>\n<p>Smartscape shows all the dependencies of a given service. Those include connections to queues, web servers, app servers, and a native process. The host view shows historical and live time-series data for usage as well as the consuming processes. This information allows us to better plan the migration, as all depending services must be considered during the migration.</p>\n<p><img src=\"assets/lab1-smartscape.png\" alt=\"image\" /></p>\n<p>Referring to the picture above: </p>\n<ul>\n<li>On the horizontal axis, it visualizes all ingoing and outgoing call relationships within each tier</li>\n<li>On the vertical axis, it displays full-stack dependencies across all tiers<ul>\n<li>Data center</li>\n<li>Hosts</li>\n<li>Process</li>\n<li>Service</li>\n<li>Application</li></ul></li>\n</ul>\n<h2 id=\"taskstocompletethisstep\">Tasks to complete this step</h2>\n<p><details>\n<summary>Task - Review the data on the Smartscape screen </summary>\nLet’s see how Dynatrace can visualize these processes using Smartscape.</p>\n<ol>\n<li>Be sure you are on the <code>dt-orders-monolith</code> host page</li>\n<li>Just click on the <code>...</code> box on the to the right of the host name</li>\n<li>pick <code>Smartscape view</code> menu option</li>\n<li>this will open Smartscape filtered to this Host Instance</li>\n</ol>\n<p><img src=\"assets/lab1-host-smartscape.png\" alt=\"image\" /></p>\n<p>Feel free to explore the Smartscape.</p>\n<p></details></p>","activityList":[]},{"id":"3.6","name":"Process\r","content":"<h2 id=\"process\">Process</h2>\n<p>In the Smartscape view, we saw the visualizations of the relationships in vertical stack and as well as the relationships spatially. Now let’s view the processes and services running on the host.</p>\n<p>As you plan your migration, you need more than just host level metrics.  Knowing the details for each service, <strong>BEFORE</strong> you change it, will lower the risk of impacting the business.</p>\n<h2 id=\"howthishelps\">👍 How this helps</h2>\n<p>Very quickly you have seen what processes and services are running on a host AND more importantly, what processes and services call (outbound) and are being called (inbound).  Having a real-time picture is certainly more accurate than an out of date documentation.</p>\n<h2 id=\"taskstocompletethisstep\">Tasks to complete this step</h2>\n<p><details>\n<summary>Task 1 - Review the data on the Process screen </summary></p>\n<p>Return back to the host view for the host with the prefix of <code>dt-orders-monolith</code> and locate the <code>Processes and Containers</code> section.</p>\n<p>Click on the 2nd <code>monolith-frontend</code> process to open the process detail view.</p>\n<p><img src=\"assets/lab1-host-process.png\" alt=\"image\" /></p>\n<h2 id=\"processview\">Process view</h2>\n<p>You should be on the process page where you will see information for this process.  Follow the picture below to locate the following:</p>\n<ol>\n<li>Click on the <code>Properties and tags</code> line to toggle on/off to see additional data </li>\n<li>Notice the properties such as open ports</li>\n<li>On the info graphic:<ul>\n<li>Click to view the processes that call this process (Inbound)</li>\n<li>Click to view the services that are served by this process. In this case there are multiple</li>\n<li>Click to view the processes that this process calls (Outbound)</li>\n<li>Click to view the Process specific metrics</li></ul></li>\n<li>Did you notice Docker??</li>\n</ol>\n<p><img src=\"assets/lab1-process-view.png\" alt=\"image\" /></p>\n<h3 id=\"technicalnote\">💥 <strong>TECHNICAL NOTE</strong></h3>\n<p><em>Dynatrace automatically recognizes many common processes like Tomcat and will capture process specific metrics such as JVM garbage collection. See a list of supported technologies, languages and containers in the <a href=\"https://www.dynatrace.com/support/help/technology-support/supported-technologies-and-versions\">Dynatrace documentation</a></em></p>\n<h2 id=\"dynatraceandcontainers\">Dynatrace and containers</h2>\n<p>In the picture above, the arrow shows the properties for Docker.</p>\n<p>Our sample app was built as a Docker container and Dynatrace hooks into containers and provides code for injecting OneAgent into containerized process.  </p>\n<h2 id=\"howdynatracemonitorscontainers\">How Dynatrace monitors containers</h2>\n<p><img src=\"assets/lab1-docker-monitoring.png\" alt=\"image\" /></p>\n<p>There’s no need to modify your Docker images, modify run commands, or create additional containers to enable Docker monitoring. Simply install OneAgent on your hosts that serve containerized applications and services. Dynatrace automatically detects the creation and termination of containers and monitors the applications and services contained within those containers.</p>\n<h3 id=\"technicalnote-1\">💥 <strong>TECHNICAL NOTE</strong></h3>\n<p><em>You can read more about Dynatrace Docker Monitoring <a href=\"https://www.dynatrace.com/support/help/technology-support/cloud-platforms/other-platforms/docker/basic-concepts/how-dynatrace-monitors-containers/\">here</a> and technical details <a href=\"https://www.dynatrace.com/support/help/technology-support/cloud-platforms/other-platforms/docker/monitoring/monitor-docker-containers\">here</a></em>\n</details>\n<details>\n<summary>Task 2 - Review the data on the Services screen </summary></p>\n<p>Now Let’s review a specific service.</p>\n<ol>\n<li>Click the <code>services</code> square above the host infographic to open the list of services</li>\n<li>From the list of services, choose the <code>frontend</code></li>\n</ol>\n<p><img src=\"assets/lab1-pick-service.png\" alt=\"image\" /></p>\n<h2 id=\"serviceview\">Service View</h2>\n<p>You should be on the service page where you will see information for this specific service.  Follow the picture below to locate the following:</p>\n<ol>\n<li>Click on the <code>Properties</code> line to toggle on/off to see additional data</li>\n<li>Click to view the services that call this service (Inbound)</li>\n<li>Click to view the services that this service calls (Outbound)</li>\n</ol>\n<p><img src=\"assets/lab1-service-view.png\" alt=\"image\" /></p>\n<p></details></p>","activityList":[]},{"id":"3.7","name":"Services\r","content":"<h2 id=\"services\">Services</h2>\n<p>Web applications consist of web pages that are served by web servers and web application processes, for example Tomcat. Web and mobile applications are built upon services that process requests like web requests, web service calls, and messaging. </p>\n<p>Such \"server-side services\" can take the form of web services, web containers, database requests, custom services, and more. Services may in turn call other services such as web services, remote services, and databases services.</p>\n<h2 id=\"howthishelps\">👍 How this helps</h2>\n<p>As you plan your migration, it is important to gain a complete picture of interdependency to the rest of the environment architecture at host, processes, services, application perspectives. Since time is always scarce, being able to do this in a single place can shorten assessment timelines.</p>\n<h2 id=\"taskstocompletethisstep\">Tasks to complete this step</h2>\n<p><details>\n<summary>Task 1 - Review the Services being monitored</summary>\nLet’s now take a look at all the services being monitored by clicking on the <code>Services</code> left side Dynatrace menu.</p>\n<ol>\n<li><p>In the management zone drop down, choose <code>dt-orders-monolith</code>.</p>\n<p><img src=\"assets/lab1-pick-monolith-mz.png\" alt=\"image\" /></p></li>\n<li><p>The filtered list should now look like this:</p>\n<p><img src=\"assets/lab1-trans-services.png\" alt=\"image\" /></p></li>\n<li><p>Choose the <code>frontend</code> service.</p></li>\n<li><p>On the <code>frontend</code> service page, find the <code>Dynamic Web Requests</code> section on the right and click the <code>view Dynamic Requests</code> button to see what it calls. </p>\n<p><img src=\"assets/lab1-dynamic-requests-arrow.png\" alt=\"image\" /></p></li>\n</ol>\n<ul>\n<li><p>On this page you can view the transactions as time-series charts.</p>\n<p><img src=\"assets/lab1-dynamic-requests-chart.png\" alt=\"image\" /></p></li>\n<li><p>On this page you can view the top 15 requests and their response time consumption.  You should recognize the URLs from the sample app!</p>\n<p><img src=\"assets/lab1-dynamic-requests-list.png\" alt=\"image\" /></p></li>\n<li><p>By clicking on one of the requests, the time-series charts are filtered to just that one request.</p>\n<p><img src=\"assets/lab1-request-filter.png\" alt=\"image\" />\n</details>\n<details><summary>Task 2 - Review the Analysis View screen</summary></p></li>\n<li><p>On the top of the page on the right is a button labeled <code>Create Analysis view</code>, click that.</p>\n<p><img src=\"assets/lab1-analysis-view-button.png\" alt=\"image\" /></p></li>\n<li><p>Try the various options available to view, filter and analyze data.</p>\n<p><img src=\"assets/lab1-analysis-view.png\" alt=\"image\" /></p></li>\n</ul>\n<p></details></p>","activityList":[]},{"id":"3.8","name":"Analyze serviceflow\r","content":"<h2 id=\"analyzeserviceflow\">Analyze serviceflow</h2>\n<p>We just saw one way to review process and service communication, but let’s look at how Dynatrace understands your applications’ transactions from end to end and visualizes through <code>Service Backtraces</code> and <code>Service flows</code>.</p>\n<ul>\n<li><p>With <code>Service flow</code>, you see the flow of service calls <strong>FROM</strong> a service, request, or their filtered subset. Along with the specific services that are triggered, you can also see how each component of a request contributes to the overall response time.</p></li>\n<li><p>With <code>Service backtrace</code>, you see the calls <strong>TO</strong> a service.</p></li>\n</ul>\n<h2 id=\"howthishelps\">👍 How this helps</h2>\n<p>As you plan your migration, it is important to gain a complete picture of interdependency to the rest of the environment architecture at host, processes, services, and application perspectives. Since time is always scarce, being able to do this in a single place can shorten assessment timelines.</p>\n<p>Knowing the type of access, executed statements, and amount of data transferred during regular hours of operation allows for better planning and prioritization. </p>\n<h2 id=\"taskstocompletethisstep\">Tasks to complete this step</h2>\n<p><details>\n<summary>Task - Review the Service Flow </summary></p>\n<ol>\n<li><p>Return to the <code>frontend</code> service.  You can use the <code>breakcrumb</code> menu as shown below.</p>\n<p><img src=\"assets/lab1-navigate-to-frontend.png\" alt=\"image\" /></p></li>\n<li><p>On the <code>frontend</code> service page, locate the <code>Understand dependencies</code> section on the right, and then click the <code>view service flow</code> button. </p>\n<p><img src=\"assets/lab1-service-flow-arrow.png\" alt=\"image\" /></p></li>\n</ol>\n<h2 id=\"responsetimeperspective\">Response time perspective</h2>\n<p>You should now be on the <strong>Service flow</strong> page.</p>\n<p>Right away, we can see how this application is structured:  </p>\n<ul>\n<li>Frontend calls backend</li>\n<li>Backend calls database</li>\n</ul>\n<p><img src=\"assets/lab1-service-flow.png\" alt=\"image\" /></p>\n<p>Refer to the numbers in the picture above:</p>\n<ol>\n<li>The timeframe defaults to 10 minutes but can be adjusted. </li>\n<li>We are viewing the data from a <strong>Response time perspective</strong>. Shortly, we will review the <strong>Throughput perspective</strong>.</li>\n<li>Click on the boxes to expand the response time metrics. We can see that most of the time is spent in the backend service.</li>\n<li>Even though there are a few calls to the database for every backend service request, only a very small amount of the response time is spent in the database. </li>\n</ol>\n<h2 id=\"throughputperspective\">Throughput perspective</h2>\n<p><img src=\"assets/lab1-service-flow-tp.png\" alt=\"image\" /></p>\n<p>Refer to the numbers in the picture above:</p>\n<ol>\n<li>The timeframe defaults to 10 minutes but can be adjusted</li>\n<li>Change to the <strong>Throughput</strong> perspective by clicking on the box</li>\n<li>Click on the boxes to expand the metrics to see the number of requests and average response times going to the backend sevice</li>\n<li>We can see the number of requests to <code>backend</code> database</li>\n</ol>\n<p></details></p>","activityList":[]},{"id":"3.9","name":"Analyze service backtrace\r","content":"<h2 id=\"analyzeservicebacktrace\">Analyze service backtrace</h2>\n<p>Dynatrace understands your applications transactions from end to end. This transactional insight is visualized several ways like the backtrace. </p>\n<p>The backtrace tree view represents the sequence of services that led to this service call, beginning with the page load or user action in the browser.</p>\n<h2 id=\"howthishelps\">👍 How this helps</h2>\n<p>Using the service flow and service backtrace, these two tools give you a complete picture of interdependency to the rest of the environment architecture at host, processes, services, application perspectives. </p>\n<h2 id=\"taskstocompletethisstep\">Tasks to complete this step</h2>\n<p><details>\n<summary>Task - Review the Service Backtrace </summary></p>\n<p>Let’s now take a look at the services by clicking on the <code>Services</code> left side Dynatrace menu.</p>\n<p>Pick the <code>backend</code> service.</p>\n<p><img src=\"assets/lab1-trans-services-db.png\" alt=\"image\" /></p>\n<p>On the <code>backend</code> service, click on the <code>Analyze Backtrace</code> button.</p>\n<p><img src=\"assets/lab1-service-backtrace-arrow.png\" alt=\"image\" /></p>\n<p>You should be on the service backtrace page where you will see information for this specific service.</p>\n<p>This will get more interesting in the next lab, but for the monolith backend, we can see that the backtrace is as follows:</p>\n<ol>\n<li>The starting point is the <code>backend</code></li>\n<li><code>backend</code> is called by the <code>frontend</code> service</li>\n<li><code>ApacheJMeter</code> traffic from the load generator script</li>\n<li>You may also see browser traffic to the <strong>frontend</strong> from the <code>My web application</code>.  If you don't that is OK.</li>\n</ol>\n<p><em><strong>If you click on any of the rows in the backtrace, the bottom portion of the page will expand.</strong></em></p>\n<p><img src=\"assets/lab1-service-backtrace-arrows.png\" alt=\"image\" /></p>\n<p></details></p>","activityList":[]},{"id":"3.10","name":"Databases\r","content":"<h2 id=\"databases\">Databases</h2>\n<p>As you plan your migration, Database observability is critical to a successful plan. Knowing the type of access, executed statements, and amount of data transferred during regular hours of operation allows for better migration planning and prioritization of the move groups. In some cases, you may decide to not migrate this database in favor of other services or databases that are less complex to migrate due to fewer dependencies.</p>\n<h2 id=\"howthishelps\">👍 How this helps</h2>\n<p>When monitoring database activity, Dynatrace shows you which database statements are executed most often and which statements take up the most time. You can also see which services execute the database statements, what will be direct input to migration planning, and prioritization of the move groups.</p>\n<p>Dynatrace monitors all the popular databases like SQL Server, Oracle, and MongoDB. See <a href=\"https://www.dynatrace.com/platform/database-monitoring/\" target=\"_blank\">Dynatrace documentation </a> for more details on platform support.</p>\n<h2 id=\"taskstocompletethisstep\">Tasks to complete this step</h2>\n<p><details>\n<summary>Task 1 - Navigate to the Database screen </summary></p>\n<ol>\n<li><p>Lets get back to the <code>backend</code> service. One way is to go back to the <code>Services</code> left side Dynatrace menu and then pick the <code>backend</code> service for the <code>dt-orders-monolith</code> management zone.</p></li>\n<li><p>On the <code>backend</code> service page, click on the <code>[embedded]</code> database to open the database service page. </p></li>\n</ol>\n<p><img src=\"assets/lab1-pick-db.png\" alt=\"image\" />\n</details>\n<details>\n<summary>Task 2 - Review the Database screen </summary></p>\n<p>The sample application uses an <a href=\"http://hsqldb.org/\" target=\"_blank\">In memory Java relational database</a>.  On this page you can explore the database process like</p>\n<ol>\n<li>What services call this database</li>\n<li>Database availability</li>\n<li>View individual SQL statements</li>\n<li>Custom metric analysis </li>\n</ol>\n<p><img src=\"assets/lab1-database.png\" alt=\"image\" /></p>\n<p></details></p>","activityList":[]},{"id":"3.11","name":"Technologies\r","content":"<h2 id=\"technologies\">Technologies</h2>\n<p>By default, Dynatrace gives you FullStack horizontal (who talks to whom) and vertical (what runs on what) dependency visibility as part of Dynatrace Smartscape! All without a single line of code or configuration change – just by installing the OneAgent</p>\n<p>Seeing which processes make up the monolith has been an eye-opener for many teams that have done this exercise. “Oh – we completely forgot about the dependency to this legacy process we introduced 5 years ago!” – that’s a common thing you hear!</p>\n<p>As you plan your migration, knowing what technologies make up your eco-system is key so that you can decide whether to migrate, refactor or replace certain services.</p>\n<p>The workshop is somewhat limited, so here is an example from another environment.</p>\n<p><img src=\"assets/lab1-technology-demo.png\" alt=\"image\" /></p>\n<h2 id=\"howthishelps\">👍 How this helps</h2>\n<p>This is another out the box feature that helps you understand what technologies are in your environment with a heat map presentation that shows to what degree they exist. </p>\n<h2 id=\"taskstocompletethisstep\">Tasks to complete this step</h2>\n<p><details>\n<summary>Task 1 - Review the Technologies view </summary></p>\n<ol>\n<li><p>Click on the <strong>Technology and processes</strong> link on the left side menu within Dynatrace to view the technologies that OneAgent was able to automatically discover and instrument.</p>\n<p><img src=\"assets/lab1-technology.png\" alt=\"image\" /></p></li>\n<li><p>Make sure your management zone filter is set to <code>All</code> so that you see everything</p>\n<p><img src=\"assets/lab1-mz-filter-off.png\" alt=\"image\" /></p></li>\n<li><p>In the filter box, type <code>tag</code>, choose <code>stage</code>, and the value of <code>production</code>. It should look like this:</p>\n<p><img src=\"assets/lab1-technology-filter.png\" alt=\"image\" /></p></li>\n</ol>\n<h2 id=\"planningahead\">Planning Ahead</h2>\n<p>You can always click into the <code>Dynatrace Hub</code> menu within Dynatrace to learn about the many technologies that Dynatrace supports.  This list is in sync and constantly updated in conjunction with the <a href=\"https://www.dynatrace.com/technologies\" target=\"_blank\">Dynatrace website technologies pages. </a></p>","activityList":[]},{"id":"3.12","name":"Summary\r","content":"<h2 id=\"summary\">Summary</h2>\n<p>By just installing the OneAgent, we have now gained a detailed topological view of sample application from the both the infrastructure and application tiers and we are now ready to tackle our adoption to the cloud armed with the answers we need.</p>\n<ul>\n<li><strong>Right Priority</strong> - We now understand the complexity and interdependency of services and components to the rest of the environment architecture</li>\n<li><strong>Right-Sizing the environment</strong> - We now understand which resources are required to move along with their required resource consumption patterns</li>\n<li><strong>Best Migration Strategy</strong> - We now understand the current end-to-end transactions through architecture and can choose the best migration strategy (rehost, refactor, rearchitect, rebuild)</li>\n</ul>\n<h3 id=\"checklist\">Checklist</h3>\n<p>In this section, you should have completed the following:</p>\n<p>🔷 Review Dynatrace OneAgent</p>\n<p>🔷 Review real-time data now available for the sample application</p>\n<p>🔷 Review how Dynatrace helps with modernization planning</p>\n<p>🏫<strong>Class Note</strong> - Please update the Tracking Spreadsheet if you've completed the task on this step.</p>","activityList":[]}]},{"id":"4","name":"Lab 2 - Kubernetes Observability\r","content":"<h2 id=\"lab2kubernetesobservability\">Lab 2 - Kubernetes Observability</h2>\n<p>Re-hosting (also referred to as lift and shift) is a common migration use case. Re-architecture and Re-platform are steps that break the traditional architectures and replace individual components with cloud services and microservices.</p>\n<p>We just learned how we can get great information on services, processes and user requests using Dynatrace and OneAgent. This helps us now decide what individual features or complete applications based on business benefits we need to migrate and modernize. The idea here is to focus on feature-based business benefit with functional migration. </p>\n<h2 id=\"objectivesofthislab\">Objectives of this Lab</h2>\n<p>🔷 Install the Dynatrace Operator and sample application</p>\n<p>🔷 Review how the sample application went from a simple architecture to multiple services </p>\n<p>🔷 Examine the transformed application using service flows and back traces </p>\n<p>🏫<strong>Class Note</strong> - Please update the Tracking Spreadsheet if you've completed the task on this step.</p>","activityList":[{"id":"4.1","name":"Modernize the Sample App \r","content":"<h2 id=\"modernizethesampleapp\">Modernize the Sample App</h2>\n<p>As we saw earlier, the sample application is a three-tiered application --&gt; frontend, backend, database.</p>\n<p>For our lab, another version of the application exists that breaks out each of these backend services into separate services. By putting these services into Docker images, we gain the ability to deploy the service into modern platforms like Azure Kubernetes and Cloud managed services such as the ones from Azure shown below.</p>\n<p><img src=\"assets/lab4-app-architecture.png\" alt=\"image\" /></p>\n<h2 id=\"beyondthelab\">Beyond the Lab</h2>\n<p>Over time, you can imagine that this sample application will be further changed to add in other technologies like Azures serverless and other PaaS services like Azures SQL or Cosmo DB databases and virtual networking Application gateways as shown in the picture below.</p>\n<p><img src=\"assets/lab4-app-architecture-future.png\" alt=\"image\" /></p>\n<h2 id=\"technicalnote\">💥 <strong>TECHNICAL NOTE</strong></h2>\n<p>We will not cover this, but organizations are establishing DevOps approaches and Continuous Integration (CI) pipelines to build and test each service independently. They are also adding Continuous Deployment (CD) as well to the process too that vastly increases our ability to delivery features faster to our customers. </p>","activityList":[]},{"id":"4.2","name":"Lab Setup\r","content":"<h2 id=\"labsetup\">Lab Setup</h2>\n<p>Refer to the picture below, here are the components for lab 2.</p>\n<p><img src=\"assets/lab2-setup.png\" alt=\"image\" /></p>\n<p><strong>#1 . Sample Application</strong>\nSample app representing a \"services\" architecture of a frontend and multiple backend services implemented as Docker containers that we will review in this lab.</p>\n<p><strong>#2 . Kubernetes</strong>\nAzure Kubernetes Service (AKS) is hosting the application. The Kubernetes cluster had the Dynatrace OneAgent Operator installed. (see below for more details).  Two AKS nodes make up the Kubernetes cluster. The Dynatrace OneAgent was preinstalled by the OneAgent operator and is sending data to your Dynatrace SaaS environment. (see below for more details)</p>\n<p><strong>#3 . Dynatrace Operator</strong>\nDynatrace OneAgent is container-aware and comes with built-in support for out-of-the-box monitoring of Kubernetes. Dynatrace supports full-stack monitoring for Kubernetes, from the application down to the infrastructure layer.</p>\n<p><strong>#4 . Dynatrace</strong>\nDynatrace tenant where monitoring data is collected and analyzed.</p>\n<p><strong>#5 . Full-Stack Dashboard</strong>\nMade possible by the Dynatrace OneAgent that will automatically instrument each running node &amp; pod in AKS.</p>\n<p><strong>#6 . Kubernetes Dashboard</strong>\nThe Kubernetes page provides an overview of all Kubernetes clusters showing monitoring data like the clusters’ sizing and utilization.\n </p>","activityList":[]},{"id":"4.3","name":"Deploy Kubernetes Dynatrace Operator\r","content":"<h2 id=\"deploykubernetesdynatraceoperator\">Deploy Kubernetes Dynatrace Operator</h2>\n<p>One key Dynatrace advantage is ease of activation. OneAgent technology simplifies deployment across large enterprises and relieves engineers of the burden of instrumenting their applications by hand. As Kubernetes adoption continues to grow, it becomes more important than ever to simplify the activation of observability across workloads without sacrificing the deployment automation that Kubernetes provides. Observability should be as cloud-native as Kubernetes itself.</p>\n<p>In our workshop, we will install the Dynatrace Operator that streamlines lifecycle management.  You can read more about it here in this <a href=\"https://www.dynatrace.com/news/blog/new-dynatrace-operator-elevates-cloud-native-observability-for-kubernetes/\" target=\"_blank\"> Dynatrace Blog </a></p>\n<p>Organizations will often customize the Dynatrace Operator installation and you can read more about the options in the <a href=\"https://www.dynatrace.com/support/help/technology-support/container-platforms/kubernetes/monitor-kubernetes-environments/\" target=\"_blank\"> Dynatrace Doc</a> but, we are going to use a single command that we can get from the Dynatrace interface to show how easy it is to get started.</p>\n<p>When we run this command, it will do the following:</p>\n<ul>\n<li>Create a namespace called <code>dynatrace</code> in your cluster containing the Dynatrace Operator supporting pods</li>\n<li>Set the OneAgent on each of the cluster nodes as to provide full-stack Dynatrace monitoring</li>\n<li>Create a Kubernetes dashboard that will be populated with the Kubernetes data pulled from the API</li>\n<li>Setup a Dynatrace ActiveGate that runs as a container in the <code>dynatrace</code> namespace that is used in the polling of Kubernetes API</li>\n<li>Enable preset out-of-the-box Kubernetes dashboards</li>\n</ul>\n<h2 id=\"taskstocompletethisstep\">Tasks to complete this step</h2>\n<p><details><summary>Task - Install Dynatrace Operator</summary></p>\n<ol>\n<li><p>To navigate to Kubernetes page, follow these steps and refer to the picture below:</p>\n<ol>\n<li>Within Dynatrace, click on the <code>Deploy Dynatrace</code> menu</li>\n<li>Click on the <code>Start Installation</code> button</li>\n<li>Click on the <code>Kubernetes</code> button</li></ol>\n<p><img src=\"assets/lab4-operator-menu.png\" alt=\"image\" /></p></li>\n<li><p>To get the Dynatrace Operator installation command, refer to the steps and pictures below:</p>\n<ol>\n<li>On the Kubernetes configuration page, enter <code>workshop</code> for the name. This is not the cluster name, it will show up as the Kubernetes page name in Dynatrace</li>\n<li>Click the <code>Create tokens</code> button</li>\n<li>Select the <code>Skip SSL Certificate Check</code> to be ON</li>\n<li>Click the <code>Copy</code> button</li></ol>\n<p><img src=\"assets/lab4-operator.png\" alt=\"image\" /></p></li>\n<li><p>Paste the command in Azure Shell and run it</p></li>\n<li><p>Once the script is complete, then monitor the installation until all the pods are in <code>Running</code> state.</p>\n<pre><code class=\"hljs\">kubectl -n dynatrace <span class=\"hljs-builtin-name\">get</span> pods\n</code></pre>\n<p>Rerun the command until the output looks like this:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-attribute\">NAME</span>                                 READY   STATUS    RESTARTS    AGE\n<span class=\"hljs-attribute\">dynakube</span>-activegate-<span class=\"hljs-number\">0</span>                 <span class=\"hljs-number\">1</span>/<span class=\"hljs-number\">1</span>     Running   <span class=\"hljs-number\">0</span>          <span class=\"hljs-number\">2</span>m<span class=\"hljs-number\">45</span>s\n<span class=\"hljs-attribute\">dynakube</span>-oneagent-pg<span class=\"hljs-number\">9</span>q<span class=\"hljs-number\">6</span>               <span class=\"hljs-number\">1</span>/<span class=\"hljs-number\">1</span>     Running   <span class=\"hljs-number\">0</span>          <span class=\"hljs-number\">2</span>m<span class=\"hljs-number\">45</span>s\n<span class=\"hljs-attribute\">dynakube</span>-oneagent-vqns<span class=\"hljs-number\">7</span>               <span class=\"hljs-number\">1</span>/<span class=\"hljs-number\">1</span>     Running   <span class=\"hljs-number\">0</span>          <span class=\"hljs-number\">2</span>m<span class=\"hljs-number\">43</span>s\n<span class=\"hljs-attribute\">dynakube</span>-operator-fd<span class=\"hljs-number\">9</span>b<span class=\"hljs-number\">7</span>cc<span class=\"hljs-number\">79</span>-df<span class=\"hljs-number\">9</span>ph     <span class=\"hljs-number\">1</span>/<span class=\"hljs-number\">1</span>     Running   <span class=\"hljs-number\">0</span>          <span class=\"hljs-number\">2</span>m<span class=\"hljs-number\">45</span>s\n<span class=\"hljs-attribute\">dynatrace</span>-webhook-f<span class=\"hljs-number\">946</span>fb<span class=\"hljs-number\">4</span>c<span class=\"hljs-number\">6</span>-q<span class=\"hljs-number\">5</span>k<span class=\"hljs-number\">5</span>g     <span class=\"hljs-number\">1</span>/<span class=\"hljs-number\">1</span>     Running   <span class=\"hljs-number\">0</span>          <span class=\"hljs-number\">3</span>m<span class=\"hljs-number\">59</span>s\n</code></pre>\n<p></details></p></li>\n</ol>","activityList":[]},{"id":"4.4","name":"Deploy sample application\r","content":"<h2 id=\"deploysampleapplication\">Deploy sample application</h2>\n<p>Dynatrace automatically derives tags from your Kubernetes/OpenShift labels. This enables you to automatically organize and filter all your monitored Kubernetes/OpenShift application components.</p>\n<p>To review what is configured for the sample application, go ahead and click on the link for YAML file: <a href=\"https://github.com/dt-alliances-workshops/azure-modernization-dt-orders-setup/tree/master/app-scripts/manifests/frontend.yml\" target=\"_blank\">frontend.yml</a> </p>\n<p>Notice the labels and annotations:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-attr\">metadata:</span>\n      <span class=\"hljs-attr\">labels:</span>\n        <span class=\"hljs-attr\">app.kubernetes.io/name:</span> <span class=\"hljs-string\">frontend</span>\n        <span class=\"hljs-attr\">app.kubernetes.io/version:</span> <span class=\"hljs-string\">&quot;1&quot;</span>\n        <span class=\"hljs-attr\">app.kubernetes.io/component:</span> <span class=\"hljs-string\">frontend</span>\n        <span class=\"hljs-attr\">app.kubernetes.io/part-of:</span> <span class=\"hljs-string\">dt-orders</span>\n        <span class=\"hljs-attr\">app.kubernetes.io/managed-by:</span> <span class=\"hljs-string\">helm</span>\n        <span class=\"hljs-attr\">app.kubernetes.io/created-by:</span> <span class=\"hljs-string\">dynatrace-demos</span>\n      <span class=\"hljs-attr\">annotations:</span>\n        <span class=\"hljs-attr\">owner:</span> <span class=\"hljs-string\">Team</span> <span class=\"hljs-string\">Frontend</span>\n        <span class=\"hljs-attr\">chat-channel:</span> <span class=\"hljs-string\">dev-team-frontend</span> \n</code></pre>\n<p>Notice the defined container and version.  These containers are stored in <a href=\"https://hub.docker.com/u/dtdemos\" target=\"_blank\"> DockerHub </a>.</p>\n<pre><code class=\"hljs\"><span class=\"hljs-attr\">spec:</span>\n    <span class=\"hljs-attr\">containers:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">frontend</span>\n    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">dtdemos/dt-orders-frontend:1</span>\n</code></pre>\n<p>Notice the <code>DT_CUSTOM_PROPS</code> environment variable:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-symbol\">env:</span>\n    - name: DT_CUSTOM_PROP\n<span class=\"hljs-symbol\">        value:</span> <span class=\"hljs-string\">&quot;project=dt-orders service=frontend&quot;</span>\n</code></pre>\n<h3 id=\"technicalnote\">💥 <strong>TECHNICAL NOTE</strong></h3>\n<p>The <code>DT_CUSTOM_PROPS</code> is a special Dynatrace feature, that the OneAgent will automatically recognize and make Dynatrace tags for the process. You can read more details in the <a href=\"https://www.dynatrace.com/support/help/shortlink/process-group-properties#anchor_variables\" target=\"_blank\"> Dynatrace Documentation </a></p>\n<h1 id=\"kubernetesrolebinding\">Kubernetes Role Binding</h1>\n<p>In Kubernetes, every pod is associated with a service account which is used to authenticate the pod's requests to the Kubernetes API. If not otherwise specified the pod uses the default service account of its namespace.</p>\n<ul>\n<li><p>Every namespace has its own set of service accounts and thus also its own namespace-scoped default service account. The labels of each pod for which the service account has view permissions will be imported into Dynatrace automatically.</p></li>\n<li><p>In order for Dynatrace to read the Kubernetes properties and annotations, you need to grant the Kubernetes default service account a viewer role into the <code>staging</code> namespace to enable this. We only have one namespace, but you will need to repeat these steps for all service accounts and namespaces you want to enable for Dynatrace within your environments.</p></li>\n</ul>\n<p>For the workshop, we already updated the required file with the <code>staging</code> namespace. Next you will run the setup script that will apply it to your cluster. Go ahead and open this folder and look at the <a href=\"https://github.com/dt-alliances-workshops/azure-modernization-dt-orders-setup/blob/master/app-scripts/manifests/dynatrace-oneagent-metadata-viewer.yaml\" target=\"_blank\"> dynatrace-oneagent-metadata-viewer.yaml </a> file.  </p>\n<h2 id=\"taskstocompletethisstep\">Tasks to complete this step</h2>\n<p><details><summary>Task  - Deploy the Sample App to Kubernetes</summary></p>\n<ol>\n<li>In the Azure Cloud Shell:</li>\n</ol>\n<pre><code class=\"hljs bash language-bash\"><span class=\"hljs-built_in\">cd</span> ./app-scripts\n.start-k8.sh\n</code></pre>\n<ol start=\"2\">\n<li>The Kubernetes take a few minutes to come to a running, rerun this command until all the pods are in <code>Running</code> status.</li>\n</ol>\n<pre><code class=\"hljs bash language-bash\">kubectl -n staging get pods\n</code></pre>\n<p>The output should look like this:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-attribute\">NAME</span>                               READY   STATUS    RESTARTS   AGE\n<span class=\"hljs-attribute\">browser</span>-traffic-<span class=\"hljs-number\">5</span>b<span class=\"hljs-number\">9456875</span>d-ks<span class=\"hljs-number\">9</span>vw   <span class=\"hljs-number\">1</span>/<span class=\"hljs-number\">1</span>     Running   <span class=\"hljs-number\">0</span>          <span class=\"hljs-number\">30</span>h\n<span class=\"hljs-attribute\">catalog</span>-<span class=\"hljs-number\">7</span>dcf<span class=\"hljs-number\">64</span>cc<span class=\"hljs-number\">99</span>-hfrpg           <span class=\"hljs-number\">1</span>/<span class=\"hljs-number\">1</span>     Running   <span class=\"hljs-number\">0</span>          <span class=\"hljs-number\">2</span>d<span class=\"hljs-number\">8</span>h\n<span class=\"hljs-attribute\">customer</span>-<span class=\"hljs-number\">8464884799</span>-vljdx          <span class=\"hljs-number\">1</span>/<span class=\"hljs-number\">1</span>     Running   <span class=\"hljs-number\">0</span>          <span class=\"hljs-number\">2</span>d<span class=\"hljs-number\">8</span>h\n<span class=\"hljs-attribute\">frontend</span>-<span class=\"hljs-number\">7</span>c<span class=\"hljs-number\">466</span>b<span class=\"hljs-number\">9</span>d<span class=\"hljs-number\">69</span>-<span class=\"hljs-number\">9</span>ql<span class=\"hljs-number\">2</span>g          <span class=\"hljs-number\">1</span>/<span class=\"hljs-number\">1</span>     Running   <span class=\"hljs-number\">0</span>          <span class=\"hljs-number\">2</span>d<span class=\"hljs-number\">8</span>h\n<span class=\"hljs-attribute\">load</span>-traffic-<span class=\"hljs-number\">6886649</span>ddf-<span class=\"hljs-number\">76</span>pqf      <span class=\"hljs-number\">1</span>/<span class=\"hljs-number\">1</span>     Running   <span class=\"hljs-number\">0</span>          <span class=\"hljs-number\">2</span>d<span class=\"hljs-number\">8</span>h\n<span class=\"hljs-attribute\"><span class=\"hljs-nomarkup\">order</span></span>-<span class=\"hljs-number\">6</span>d<span class=\"hljs-number\">4</span>cd<span class=\"hljs-number\">477</span>cb-<span class=\"hljs-number\">9</span>bvn<span class=\"hljs-number\">4</span>             <span class=\"hljs-number\">1</span>/<span class=\"hljs-number\">1</span>     Running   <span class=\"hljs-number\">0</span>          <span class=\"hljs-number\">2</span>d<span class=\"hljs-number\">8</span>h\n</code></pre>\n<h3 id=\"technicalnote-1\">💥 <strong>TECHNICAL NOTE</strong></h3>\n<p>By now you understand the various automation files, lets go ahead and open up the <a href=\"https://github.com/dt-alliances-workshops/azure-modernization-dt-orders-setup/blob/master/app-scripts/start-k8.sh\" target=\"_blank\"> <code>start-k8.sh</code> </a> to review what the script did for you:</p>\n<p>This script automates a number of <code>kubectl</code> commands for the following:</p>\n<ol>\n<li>Create a namespace called <code>staging</code> where all these resources will reside</li>\n<li>Grant the Kubernetes default service account a viewer role into the <code>staging</code> namespace</li>\n<li>Create both the <code>deployment</code> and <code>service</code> Kubernetes objects for each of the sample</li>\n</ol>\n<h3 id=\"technicalnote-2\">💥 <strong>TECHNICAL NOTE</strong></h3>\n<p>You can read more details on the Kubernetes installation in the <a href=\"https://www.dynatrace.com/support/help/technology-support/container-platforms/kubernetes/other-deployments-and-configurations/leverage-tags-defined-in-kubernetes-deployments/\" target=\"_blank\"> Dynatrace Documentation </a>\n</details></p>","activityList":[]},{"id":"4.5","name":"Review Kubernetes within Dynatrace\r","content":"<h2 id=\"reviewkuberneteswithindynatrace\">Review Kubernetes within Dynatrace</h2>\n<p>In this step we will walk through the different Dynatrace dashboards that are available out of the box for monitoring Kubernetes.</p>\n<h2 id=\"taskstocompletethisstep\">Tasks to complete this step</h2>\n<p><details><summary>Task 1  - Validate AKS ActivateGate visible in Dynatrace UI</summary></p>\n<ol>\n<li><p>Go to the Dynatrace UI.</p></li>\n<li><p>From the Dynatrace Menu, click <code>Manage --&gt; Deployment status</code> to review OneAgent Deployment status</p></li>\n<li><p>Within the <code>Deployment status</code> page, next click on the <code>ActiveGate</code> option to review the Active Gate. \n<strong>Note:  You will notice there is a <code>dynakube-activegate</code> connected to your Dynatrace environment now.  This actigate gate routes all the agent traffic from apps that are running on that AKS cluster.</strong>\n</details>\n<details><summary>Task 2  - Review Kubernetes Dashboards</summary></p></li>\n</ol>\n<p>From the left-side menu in Dynatrace choose <code>Kubernetes</code> and navigate to the Kubernetes cluster page as shown below:</p>\n<p><strong>NOTE: Be sure that your management zone is NOT filtered!</strong></p>\n<p><img src=\"assets/lab2-k8s-layers.png\" alt=\"image\" /></p>\n<p><strong>1 - Kubernetes cluster</strong></p>\n<p>A summary the Kubernetes cluster is shown at the top of the Kubernetes dashboard.</p>\n<p><strong>2 - Nodes</strong></p>\n<p>The resources for the Cluster are summarized for the one-to-many hosts or Cluster nodes in this view.\nExplore specific node in the Node Analysis section, pick the analyze nodes button.\n<img src=\"assets/lab4-aks-nodeutiliz.png\" alt=\"image\" /></p>\n<p><strong>3 - Namespaces</strong></p>\n<p>Note: Namespaces are ways to partition your cluster resources to run multiple workloads (for example <code>application A</code> and <code>application B</code> workloads) on same cluster</p>\n<ol>\n<li>This workload section shows workloads over time</li>\n<li>In the Cluster workload section, pick the view all workloads button.</li>\n</ol>\n<p><img src=\"assets/lab4-aks-workload.png\" alt=\"image\" /></p>\n<p>In the filter, pick namespace then staging</p>\n<p><img src=\"assets/lab4-aks-workload-filter.png\" alt=\"image\" /></p>\n<p><strong>4 - Kubernetes workload</strong></p>\n<p>Pick the frontend to drill into.</p>\n<p><img src=\"assets/la4-aks-kubeworkload.png\" alt=\"image\" /></p>\n<p>Review the workload overview page to look at various metrics related to the workload.</p>\n<p>Click on Kubernetes POD to look at POD utilization metrics.</p>\n<p><img src=\"assets/lab4-aks-frontend-workload.png\" alt=\"image\" /></p>\n<p><strong>5 - POD</strong></p>\n<p>Review the POD overview page to look at various metrics related to the POD\nClick on Container next to look at container metrics</p>\n<p><img src=\"assets/lab4-aks-pod.png\" alt=\"image\" />\n </p>\n<p><strong>6 - Containers</strong> </p>\n<p>Referring to the diagram above, expand the properties and tags section to view:</p>\n<ol>\n<li>Container information</li>\n<li>Kubernetes information</li>\n<li>In the info graphic, pick the service to open the services list</li>\n<li>In the service list, click on k8-frontend service</li>\n</ol>\n<p><img src=\"assets/lab4-aks-container.png\" alt=\"image\" /></p>\n<p>Next click on 2 Services Icon to review the services running inside the container\nSelect the active front-end service.</p>\n<p><strong>7 - Service</strong></p>\n<p>This view should now look familiar. In Lab 1, we looked at the service for the frontend and backend.  Notice how the Kubernetes information is also available in the service properties.  </p>\n<p><img src=\"assets/aks-layer7-service.png\" alt=\"image\" />\n</details></p>","activityList":[]},{"id":"4.6","name":"Review Sample application on Kubernetes \r","content":"<h2 id=\"reviewsampleapplicationonkubernetes\">Review Sample application on Kubernetes</h2>\n<p>In this step we will review the Sample app that we modernized and deployed to Kubernetes.  Refer to this picture for a more detailed description of our setup. </p>\n<p><img src=\"assets/lab2-k8s-namespaces.png\" alt=\"image\" /></p>\n<p><strong>1 - Dynatrace Namespace</strong></p>\n<p>This <a href=\"https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\" target=\"_blank\"> Kubernetes Namespace </a> contains the pods and services that make up the Dynatrace Operator.</p>\n<p><strong>2 - Kubernetes nodes</strong></p>\n<p>Kubernetes runs your workload by placing containers into Pods to run on [Nodes]<a href=\"https://kubernetes.io/docs/concepts/architecture/nodes/\" target=\"_blank\"> Nodes </a>.</p>\n<p><strong>3 - Dynatrace</strong></p>\n<p>Dynatrace tenant where monitoring data is collected and analyzed.</p>\n<p><strong>4 - Cloud shell</strong></p>\n<p>The shell is configured with the <a href=\"https://kubernetes.io/docs/reference/kubectl/overview/\" target=\"_blank\"> kubectl </a> command line tool that lets you control Kubernetes clusters.</p>\n<p><strong>5 - Sample application namespace</strong></p>\n<p>This <a href=\"https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\" target=\"_blank\"> Kubernetes Namespace </a> contains the sample application pods and services.</p>\n<p><strong>6 - Sample application</strong></p>\n<p>The frontend service is exposed as a public IP and is accessible in a browser.</p>\n<h2 id=\"taskstocompletethisstep\">Tasks to complete this step</h2>\n<p><details><summary>Task 1  - Validate Sample App is accessible via browser</summary></p>\n<p>To view the application, we need to get the IP address assigned to the Kubernetes service for the sample application. </p>\n<ol>\n<li><p>Go back to the window where you have Azure Cloud shell open</p></li>\n<li><p>From the Azure Cloud Shell SSH command prompt type this command</p></li>\n</ol>\n<pre><code class=\"hljs\"><span class=\"hljs-symbol\">kubectl</span> -n staging <span class=\"hljs-meta\">get</span> <span class=\"hljs-keyword\">svc</span>\n</code></pre>\n<ol start=\"3\">\n<li>From the output, copy the entire value from EXTERNAL-IP and </li>\n</ol>\n<p><img src=\"assets/lab4-app-ip.png\" alt=\"image\" /> </p>\n<ol start=\"4\">\n<li>Open a browser window. Type in IP address similar to this <code>http://11.22.33.11</code> for the example above.  The output and application should look like the above browser window\n</details>\n<details><summary>Task 2  - Explore the Sample App on Kubernetes</summary></li>\n</ol>\n<p>Use the menu on on the home page to navigate around the application and notice the URL for key functionality. You will see these URLs later as we analyze the application.</p>\n<ul>\n<li>Customer List = customer/list.html</li>\n<li>Customer Detail = customer/5.html</li>\n<li>Catalog List = catalog/list.html</li>\n<li>Catalog Search Form = catalog/searchForm.html</li>\n<li>Order List = order/list.html</li>\n<li>Order Form = order/form.html</li>\n</ul>\n<h3 id=\"technicalnote\">💥 <strong>TECHNICAL NOTE</strong></h3>\n<p>The application looks like this monolith, but notice how the home page shows the versions of the three running backend services. You will see these version updated automatically as we deploy new versions of the backend services.\n</details></p>\n<p>🏫<strong>Class Note</strong> - Please update the Tracking Spreadsheet if you've completed the task on this step.</p>","activityList":[]},{"id":"4.7","name":"Analyze Service Backtrace on Kubernetes\r","content":"<h2 id=\"analyzeservicebacktraceonkubernetes\">Analyze Service Backtrace on Kubernetes</h2>\n<p>Now that we've modernized the application and installed it on Kubernetes, we still need to trace the application transactions from front to back.  </p>\n<p>Dynatrace understands your applications transactions from end to end. This transactional insight is visualized several ways like the backtrace.</p>\n<p>The backtrace tree view represents the sequence of services that led to this service call, beginning with the page load or user action in the browser.</p>\n<p>Dynatrace also gives you insight into what Kubernetes cluster, node, workload, and namespace that service is running on.</p>\n<h2 id=\"howthishelps\">👍 How this helps</h2>\n<p>The service flow and service backtrace give you a complete picture of interdependency to the rest of the environment architecture at host, processes, services, and application perspectives.</p>\n<h2 id=\"taskstocompletethisstep\">Tasks to complete this step</h2>\n<p><details><summary>Task 1  - Review Services View</summary></p>\n<ul>\n<li><p>Left Menu -&gt; Applications &amp; Microservices -&gt; Services</p>\n<p><img src=\"assets/lab2-step8-services​.png\" alt=\"image\" /></p></li>\n<li><p>Top Menu -&gt; filter by <code>dt-orders-k8 management</code> zone.</p>\n<p><img src=\"assets/lab4-k8-mgmtzone-filter.png\" alt=\"image\" /></p></li>\n<li><p>Pick the <code>order</code> service.</p></li>\n</ul>\n<p><img src=\"assets/lab4-k8-service-filter.png\" alt=\"image\" /></p>\n<ul>\n<li><p>On this service, we can quickly review the inbound and outbound dependencies.</p></li>\n<li><p>Referring to the picture, within the services infographic, click on the \"services\" square to get a list of the services that the order service calls.</p></li>\n</ul>\n<p><img src=\"assets/lab4-k8-service-view.png\" alt=\"image\" /></p>\n<p></details>\n<details><summary>Task 2  - Review Backtrace View</summary></p>\n<ul>\n<li><p>To see the backtrace page, just click on the Analyze Backtrace button.</p></li>\n<li><p>You should be on the service backtrace page where you will see information for this specific service.</p></li>\n<li><p>This will get more interesting in the next lab, but for the monolith backend, we can see that the backtrace is as follows:</p></li>\n</ul>\n<p>1 . The starting point is the backend</p>\n<p>2 . Backend service is called by the front-end</p>\n<p>3 . Front-end is a where end user requests start and the user sessions get captured </p>\n<p>4 . My web application is the default application that Dynatrace creates</p>\n<p><img src=\"assets/lab4-k8-service-backflow.png\" alt=\"image\" /></p>","activityList":[]},{"id":"4.8","name":"Analyze Service flow on Kubernetes\r","content":"<h2 id=\"analyzeserviceflowonkubernetes\">Analyze Service flow on Kubernetes</h2>\n<p>In this step we will walk through the Servce Flow view within Dynatrace  and see what's different now that its deployed on Kubernetes.</p>\n<h2 id=\"taskstocompletethisstep\">Tasks to complete this step</h2>\n<p><details><summary>Task - Review Service Flow View</summary></p>\n<ul>\n<li><p>Left Menu -&gt; Applications &amp; Microservices -&gt; Services</p>\n<p><img src=\"assets/lab2-step8-services​.png\" alt=\"image\" /></p></li>\n<li><p>Top Menu -&gt; filter by <code>dt-orders-k8 management</code> zone.</p>\n<p><img src=\"assets/lab4-k8-mgmtzone-filter.png\" alt=\"image\" /></p></li>\n<li><p>Pick the <code>frontend</code> service.</p>\n<p><img src=\"assets/lab4-k8-frontendservice-filter.png\" alt=\"image\" /></p></li>\n<li><p>Just click on the view service flow button to open this.</p></li>\n</ul>\n<p><img src=\"assets/lab4-serviceflow.png\" alt=\"image\" /> </p>\n<h2 id=\"responsetimeperspective\">Response time perspective</h2>\n<p>You should now be on the Service flow page.</p>\n<p>Right away, we can see how this application is structured:</p>\n<ul>\n<li>Frontend calls order, customer, and catalog service</li>\n<li>Order service calls order and customer service</li>\n</ul>\n<p>Something you would never know from the application web UI!</p>\n<p><img src=\"assets/lab4-serviceflow-responsetime.png\" alt=\"image\" /></p>\n<p>Refer to the picture above:</p>\n<ol>\n<li>We are viewing the data from a Response time perspective. Shortly, we will review the Throughput perspective.</li>\n<li>Click on the boxes to expand the response time metrics. Most of the response time is spent in the order service and the least in the customer services. And as in the simple version of the application, a very small amount of the response time is spent in the databases.</li>\n</ol>\n<h2 id=\"throughputperspective\">Throughput perspective</h2>\n<p><img src=\"assets/lab4-serviceflow-thoroughput.png\" alt=\"image\" />   </p>\n<p>Refer to the picture above:</p>\n<ol>\n<li>Change to the Throughput perspective by clicking on the box</li>\n<li>Click on the boxes to expand the metrics to see the number of requests and average response times going to each service</li>\n</ol>\n<h2 id=\"howthishelps\">👍 How this helps</h2>\n<p>Reviewing the architecture before and after changes is now as easy as a few clicks!</p>","activityList":[]},{"id":"4.9","name":"Summary\r","content":"<h2 id=\"summary\">Summary</h2>\n<p>While migrating to the cloud, you want to evaluate if your migration goes according to the plan, whether the services are still performing well or even better than before, and whether your new architecture is as efficient as the blueprint suggested. Dynatrace helps you validate all these steps automatically, which helps speed up the migration and validation process.</p>\n<p>Having the ability to understand service flows enables us to make smarter re-architecture and re-platforming decisions.  With support for new technologies like Kubernetes, you have confidence to modernize with a platform that spans the old and the new. </p>\n<h2 id=\"checklist\">Checklist</h2>\n<p>In this section, you should have completed the following:</p>\n<p>🔷 Review Dynatrace Operator installaiton on Kubernetes</p>\n<p>🔷 Review real-time data now available for the sample application on Kubernetes</p>\n<p>🔷 Review Kubernetes dashboards within Dynatrace</p>\n<p>🔷 Review how Dynatrace helps with modernization planning</p>\n<p>🏫<strong>Class Note</strong> - Please update the Tracking Spreadsheet if you've completed the task on this step.</p>","activityList":[]}]},{"id":"5","name":"Lab 3 - Davis AI\r","content":"<h2 id=\"lab3davisai\">Lab 3 - Davis AI</h2>\n<p>Often the monitoring tools organizations use simply don’t work in the complex ecosystem of microservices and for technologies like Kubernetes.</p>\n<p>Finding the root cause of problems is harder than ever before and the effort required goes beyond what is humanly possible when the application spans to the cloud providers and data centers and the explosion of interconnected services. There are more possibilities for failures and more hiding spots for problems to sneak into the environment when software driving more than just the application.</p>\n<p>In this lab, we will trigger a few problem and see how troubleshooting time is Significantly reduced by letting AI automatically detect problems and pinpoints the root cause, explaining business impact with no manual configurations.</p>\n<h2 id=\"objectivesofthislab\">Objectives of this Lab</h2>\n<p>🔷 Enable a problem in the application and walk through what <a href=\"https://www.dynatrace.com/platform/artificial-intelligence/\">Dynatrace Davis</a> found</p>\n<p>🏫<strong>Class Note</strong> - Please update the Tracking Spreadsheet if you've completed the task on this step.</p>","activityList":[{"id":"5.1","name":"Monaco! (Monitoring as Code)\r","content":"<h2 id=\"monacomonitoringascode\">Monaco! (Monitoring as Code)</h2>\n<h3 id=\"introduction\">Introduction</h3>\n<p><a href=\"https://www.dynatrace.com/news/blog/monitoring-as-code/\">Monaco</a> is an open source initiative that addresses the challenges of implementing monitoring.</p>\n<ul>\n<li>It uses templates to instrument monitors the same way each time across multiple environments</li>\n<li>Updates can be easily applied and tracked in any stage of development</li>\n<li>Support all best-practices including git requests/pulls/merging</li>\n<li>Monitoring config can be promoted directly in line with software releases</li>\n</ul>\n<h3 id=\"steps\">Steps</h3>\n<p>Run the following command.</p>\n<pre><code class=\"hljs bash language-bash\">./setup-workshop-config.sh\n</code></pre>\n<p>This will</p>\n<ul>\n<li>add a basic template for Monaco to use and connect to your Dynatrace tenant.</li>\n<li>configure the Dynatrace tenant with some custom thresholds.</li>\n<li>Turn off Dynatrace frequent issue detection.</li>\n</ul>\n<p>Then run this one.</p>\n<pre><code class=\"hljs bash language-bash\">./setup-workshop-config.sh k8\n</code></pre>\n<p>This step configures some automatic tags in the kubernetes cluster.</p>\n<p>And finally this one.</p>\n<pre><code class=\"hljs bash language-bash\">./setup-workshop-config.sh dashboard [your_email]\n</code></pre>","activityList":[]},{"id":"5.2","name":"Overview - Enable application problems\r","content":"<h2 id=\"overviewenableapplicationproblems\">Overview - Enable application problems</h2>\n<p>The Dynatrace Orders sample application has pre-built problems with different versions.  </p>\n<p>These problems can be enabled with a <code>set-version</code> URL that can be used to change the version and thus the behavior of the application. Version 1 is the <strong>\"normal\"</strong> behavior and problems are enabled by setting the version to a value such as 2 or 3.</p>\n<p>In the next section, you will run a unix script that sets these problems.</p>\n<h2 id=\"monolithdeploymentbackendservicehighresponsetimeforallrequests\">Monolith deployment - backend service - High Response time for all requests</h2>\n<p><img src=\"assets/lab3-backend-problem-usecase.png\" alt=\"image\" /></p>\n<h2 id=\"technicalnote\">💥 <strong>TECHNICAL NOTE</strong></h2>\n<p>Refer to <a href=\"https://github.com/dt-orders/overview\" target=\"_blank\"> dt-orders overview README </a> for more details of the various versions.</p>","activityList":[]},{"id":"5.3","name":"Overview - Dynatrace Events\r","content":"<h2 id=\"overviewdynatraceevents\">Overview - Dynatrace Events</h2>\n<p>Before we get to the problems, let's review <a href=\"https://www.dynatrace.com/support/help/dynatrace-api/environment-api/events/post-event/\" target=\"_blank\"> Dynatrace Information Events</a>.</p>\n<p>Dynatrace information events enable continuous delivery tools, such as Azure DevOps, to provide additional details for Dynatrace. Here is an example of two informational events for deployment and performance testing being be sent to Dynatrace.</p>\n<p><img src=\"assets/lab3-pipeline.png\" alt=\"image\" /></p>\n<p>There are several Dynatrace information event types:</p>\n<ul>\n<li>CUSTOM_ANNOTATION</li>\n<li>CUSTOM_CONFIGURATION</li>\n<li>CUSTOM_DEPLOYMENT</li>\n<li>CUSTOM_INFO</li>\n<li>MARKED<em>FOR</em>TERMINATION</li>\n</ul>\n<p>Below we can see both the CUSTOM<em>INFO (#1) and CUSTOM</em>DEPLOYMENT events (#2) for a service that was the root cause to a problem the Dynatrace AI engine, Davis®, determined.</p>\n<p><img src=\"assets/lab3-problemcard-events.png\" alt=\"image\" /></p>\n<p>Each event has a timestamp, event source, a few standardized fields (depending on the event type), and the option to add additional custom fields.  See <a href=\"https://www.dynatrace.com/support/help/shortlink/api-events-post-event#parameters-mapping\" target=\"_blank\"> this table </a> for details.  Here are two example events.  NOTE: the URL back to the pipeline making the change.</p>\n<p><img src=\"assets/lab3-event-examples.png\" alt=\"image\" /></p>\n<h2 id=\"howthishelps\">👍 How this helps</h2>\n<p>Having information events speeds up triage by adding context to what’s happening with the application. Just imagine getting alerted about an issue and immediately seeing a load test or deployment took place, and in one click of the event, review the system, job, and team responsible!</p>\n<h2 id=\"dynatracetags\">Dynatrace tags</h2>\n<p>When creating information events, you must target the entities to receive the event so that it’s only associated with the relevant component. That is where Dynatrace tags come in.</p>\n<p>In a nutshell, tags in Dynatrace are labels or markers used for organizing entities in large monitoring environments. Below shows a few tags for my catalog service: <code>stage:staging</code> and <code>service:catalog-service</code></p>\n<p><img src=\"assets/lab3-tags.png\" alt=\"image\" /></p>\n<h2 id=\"apicallexample\">API call Example</h2>\n<p>Here is an example of a typical events API call. You do not need to executed this as you will see this in action as part of the scripts in the next step</p>\n<pre><code class=\"hljs\">curl -X POST \\\n  https:<span class=\"hljs-comment\">//mySampleEnv.live.dynatrace.com/api/v1/events \\</span>\n  -H <span class=\"hljs-string\">&#x27;Authorization: Api-token abcdefjhij1234567890&#x27;</span> \\\n  -H <span class=\"hljs-string\">&#x27;Content-Type: application/json&#x27;</span> \\  \n  -d <span class=\"hljs-string\">&#x27;{\n  &quot;</span>eventType<span class=\"hljs-string\">&quot;: &quot;</span>CUSTOM_ANNOTATION<span class=\"hljs-string\">&quot;,\n  &quot;</span>timeoutMinutes<span class=\"hljs-string\">&quot;: 0,\n  &quot;</span>attachRules<span class=\"hljs-string\">&quot;: {\n\n    &quot;</span>tagRule<span class=\"hljs-string\">&quot;: [\n      {\n        &quot;</span>meTypes<span class=\"hljs-string\">&quot;: [\n          &quot;</span>CUSTOM_DEVICE<span class=\"hljs-string\">&quot;\n        ],\n        &quot;</span>tags<span class=\"hljs-string\">&quot;: [\n          {\n            &quot;</span>context<span class=\"hljs-string\">&quot;: &quot;</span>CONTEXTLESS<span class=\"hljs-string\">&quot;,\n            &quot;</span>key<span class=\"hljs-string\">&quot;: &quot;</span>IG-test<span class=\"hljs-string\">&quot;\n          }\n        ]\n      }\n    ]\n  },\n  &quot;</span>source<span class=\"hljs-string\">&quot;: &quot;</span>OpsControl<span class=\"hljs-string\">&quot;,\n  &quot;</span>annotationType<span class=\"hljs-string\">&quot;: &quot;</span>defect<span class=\"hljs-string\">&quot;,\n  &quot;</span>annotationDescription<span class=\"hljs-string\">&quot;: &quot;</span>coffee machine is defective<span class=\"hljs-string\">&quot;\n}&#x27;</span>\n</code></pre>","activityList":[]},{"id":"5.4","name":"Enable Backend service problem\r","content":"<h2 id=\"enablebackendserviceproblem\">Enable Backend service problem</h2>\n<p>In this step we are going to \"simulate\" a deployment of new version of the <code>backend</code> service.  After the \"deployment\" the service will exhibit a high response time for all backend requests.</p>\n<h2 id=\"taskstocompletethisstep\">Tasks to complete this step</h2>\n<p><details><summary>Task 1 - Enable the problem pattern</summary></p>\n<p>To automate the version change, a unix script is provided that will do the following:</p>\n<ul>\n<li>Call the <code>backend/set-version</code> URL set the backend version</li>\n<li>Send a Dynatrace <code>CUSTOM_DEPLOYMENT</code> event indicating the change</li>\n</ul>\n<p>From the Azure shell, run these commands to set the version:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-string\">cd</span> ./<span class=\"hljs-string\">learner-scripts</span>\n./<span class=\"hljs-built_in\">set-version.sh</span> <span class=\"hljs-string\">backend</span> <span class=\"hljs-string\">2</span>\n</code></pre>\n<p>Review the output to ensure the change was made successfully.  I should look like this with numerical values at the end for <code>Response Data: storedEventIds</code>:\n</details>\n<details><summary>Task 2 - Validate Sample App in Browser</summary></p>\n<p>The event has the URL back to the sample application, so just click that if you don't have the sample app up already.  You should see <code>version 2</code> for the customer app now too.</p>\n<p><img src=\"assets/lab3-app-backend-version-2.png\" alt=\"image\" />\n</details>\n<details><summary>Task 3 - Review & Analyze the Problem in Dynatrace</summary></p>\n<p>Go to Dynatrace menu -&gt; Problems, and you will probably see two problems that eventually get merged…</p>\n<ol>\n<li>Impact summary - multiple service impact</li>\n<li>Root cause</li>\n</ol>\n<p><img src=\"assets/lab3-backend-problem.png\" alt=\"image\" /></p>\n<h2 id=\"analyzeproblemtopfindings\">Analyze problem - top findings</h2>\n<p>Click on the <code>Analyze Response Time Degradation</code> button to view the real issue with the request.</p>\n<p>Here you can see how Dynatrace automatically analyzes the problem and lets you know whether the problem is related to code, waiting, or other services and queues.</p>\n<p>Click in the <code>active wait time</code> line with the top findings to open the execution time breakdown detail.</p>\n<p><img src=\"assets/lab3-backend-analysis.png\" alt=\"image\" /></p>\n<h2 id=\"analyzeproblemexecutiontimebreakdown\">Analyze problem - execution time breakdown</h2>\n<p>Dynatrace automatically shows the breakdown of the execution time.  To see more, click the <code>View method hotspots</code> button.</p>\n<p><img src=\"assets/lab3-backend-hotspots.png\" alt=\"image\" /></p>\n<h2 id=\"analyzeproblemhotspots\">Analyze problem - hot spots</h2>\n<p>Here the code call breakdown is shown and by expanding this tree, you can locate the method where the slow down is occurring.  <strong>NOTE: You will need to expand several stack frames to get to method causing the slow down.</strong></p>\n<p><img src=\"assets/lab3-backend-analysis-trace.png\" alt=\"image\" /></p>\n<h2 id=\"analyzeproblemimpact\">Analyze problem impact</h2>\n<p>From the breadcrumb menu, click on the <code>backend</code> to open the service page.</p>\n<p><img src=\"assets/lab3-backend-breadcrumb.png\" alt=\"image\" /></p>\n<p>Then click on the response time box in the Dynamic web requests section to open the service details page.  You can see exactly when the problem started.</p>\n<p><img src=\"assets/lab3-backend-problem-details.png\" alt=\"image\" />\n</details>\n<details><summary>Task 4 - Disable the problem pattern</summary></p>\n<p>From the Azure shell run these commands to set the version back to version 1</p>\n<pre><code class=\"hljs bash language-bash\">./set-version.sh backend 1\n</code></pre>\n<h2 id=\"technicalnote\">💥 <strong>TECHNICAL NOTE</strong></h2>\n<p><strong>Why does the problem card say 'Custom Threshold'?</strong></p>\n<p>The Dynatrace AI engine is evaluating metrics and dependencies for daily and weekly traffic patterns.  Since we just setup our sample application, there is not a lot of history to review. We setup a fixed threshold as a global service setting.</p>\n<p>To review this setting, on the left side menu, click <code>settings</code>, click <code>Anomaly Detection</code> and the the <code>Services</code> setting.</p>\n<p><img src=\"assets/lab3-global-anomoly-rules.png\" alt=\"image\" /></p>\n<p>Learn more about how How problems are detected and analyzed in the <a href=\"https://www.dynatrace.com/support/help/how-to-use-dynatrace/problem-detection-and-analysis/problem-detection/automated-multi-dimensional-baselining/\" target=\"_blank\"> Dynatrace docs </a></p>","activityList":[]},{"id":"5.5","name":"Order service problem\r","content":"<h2 id=\"orderserviceproblem\">Order service problem</h2>\n<p>In this step we are going to \"simulate\" another deployment of new version of the <code>order</code> service running on Kubernetes.  After the \"deployment\" the service will exhibit a failures for all requests.</p>\n<h2 id=\"taskstocompletethisstep\">Tasks to complete this step</h2>\n<p><details><summary>Task 1 - Enable the problem pattern</summary></p>\n<p>To automate the version change, a unix script is provided that will do the following:</p>\n<ul>\n<li>Call the <code>order/set-version</code> URL to set the order-service version</li>\n<li>Send a Dynatrace <code>CUSTOM_DEPLOYMENT</code> event indicating the change</li>\n</ul>\n<p>From the Azure shell run these commands to set the version:</p>\n<pre><code class=\"hljs bash language-bash\">./set-version.sh k8-order 3\n</code></pre>\n<p>Ensure there are numerical values at the end for <code>Response Data: storedEventIds</code> like:</p>\n<pre><code class=\"hljs bash language-bash\">Response Data\n{<span class=\"hljs-string\">&quot;storedEventIds&quot;</span>:[8663164135574257870,-5988376401319068441],<span class=\"hljs-string\">&quot;storedIds&quot;</span>:[<span class=\"hljs-string\">&quot;8663164135574257870_1628095127627&quot;</span>,<span class=\"hljs-string\">&quot;-5988376401319068441_1628095127627&quot;</span>],<span class=\"hljs-string\">&quot;storedCorrelationIds&quot;</span>:[]}\n</code></pre>\n<p></details>\n<details><summary>Task 2 - Validate the Change in Dynatrace</summary></p>\n<p>From the left side menu, navigate to the <code>Releases</code> page.  Here you will see how Dynatrace detected the versions of monitored processes.  It may take a minute, but you will see the version change in the <code>Real-time inventory</code> section and a new event in the <code>Release events</code> section.</p>\n<p><strong>NOTE</strong> Be sure to adjust the management zone to <code>dt-orders-k8</code></p>\n<p><img src=\"assets/lab3-release-order.png\" alt=\"image\" /></p>\n<p>If you expand the event, you should see something like this</p>\n<p><img src=\"assets/lab3-release-order-event.png\" alt=\"image\" />\n</details>\n<details><summary>Task 3 - Validate Sample App in Browser</summary></p>\n<p>The event has the URL back to the sample application, so just click that if you don't have the sample app up already.  You should see <code>version 3</code> for the order app now too.</p>\n<p><img src=\"assets/lab3-app-ui-order-version-3.png\" alt=\"image\" /></p>\n<p></details>\n<details><summary>Task 4 - Review & Analyze the Problem in Dynatrace</summary></p>\n<h2 id=\"3reviewproblemindynatrace\">3. Review problem in Dynatrace</h2>\n<p>The problem may take a minute to show up, but this is what the problem will look like once it does. Also, you may see two problems that eventually get merged into one as Dynatrace is performing the problem analysis.</p>\n<ol>\n<li>Problem card windows and impact summary</li>\n<li>Root cause</li>\n<li>Deployment event as additional context</li>\n</ol>\n<p><img src=\"assets/lab3-order-problem.png\" alt=\"image\" /></p>\n<h2 id=\"analyzeproblem\">Analyze problem</h2>\n<p>Referring to #4 in the picture above, click on the <code>Analyze failure rate degradation</code> button.</p>\n<p>Right away we can see that there were exceptions in the code and the <code>details</code> button can be clicked to see the code stack trace.</p>\n<p><img src=\"assets/lab3-order-problem-detail.png\" alt=\"image\" /></p>\n<h2 id=\"analyzeproblemimpact\">Analyze problem impact</h2>\n<p>From the breadcrumb menu, click on the <code>order</code> to open the service page.</p>\n<p><img src=\"assets/lab3-order-menu.png\" alt=\"image\" /></p>\n<p>On this page, notice the failure rate.  </p>\n<p><img src=\"assets/lab3-order-problem-service.png\" alt=\"image\" /></p>\n<p>Then click on the failure rate box to open the service details page.  You can see exactly when the problem started.</p>\n<p><img src=\"assets/lab3-order-problem-requests.png\" alt=\"image\" />\n</details>\n<details><summary>Task 5 - Disable the Problem Pattern</summary></p>\n<p>From the Azure shell run these commands to set the version back to version 1</p>\n<pre><code class=\"hljs\"><span class=\"hljs-string\">cd</span> ~/<span class=\"hljs-string\">azure-modernization-dt-orders-setup</span>/<span class=\"hljs-string\">learner-scripts</span>\n./<span class=\"hljs-built_in\">set-version.sh</span> <span class=\"hljs-string\">k8-order</span> <span class=\"hljs-string\">1</span>\n</code></pre>\n<p>Ensure there are numerical values at the end for <code>Response Data: storedEventIds</code> like:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-symbol\">Response</span> <span class=\"hljs-symbol\">Data</span>\n{<span class=\"hljs-string\">&quot;storedEventIds&quot;</span>:[<span class=\"hljs-number\">8663164135574257870</span>,<span class=\"hljs-number\">-5988376401319068441</span>],<span class=\"hljs-string\">&quot;storedIds&quot;</span>:[<span class=\"hljs-string\">&quot;8663164135574257870_1628095127627&quot;</span>,<span class=\"hljs-string\">&quot;-5988376401319068441_1628095127627&quot;</span>],<span class=\"hljs-string\">&quot;storedCorrelationIds&quot;</span>:[]}\n</code></pre>\n<p>Dynatrace will automatically close the problem once it detects things are back to normal.x\n</details></p>\n<p>🏫<strong>Class Note</strong> - Please update the Tracking Spreadsheet if you've completed the task on this step.</p>","activityList":[]},{"id":"5.6","name":"Summary\r","content":"<h2 id=\"summary\">Summary</h2>\n<p>In this section, you should have completed the following:</p>\n<p>🔷 Enable a problem in the application and walk through what <a href=\"https://www.dynatrace.com/platform/artificial-intelligence/\" target=\"_blank\"> Dynatrace Davis </a> found</p>\n<p>🏫<strong>Class Note</strong> - Please update the Tracking Spreadsheet if you've completed the task on this step.</p>","activityList":[]}]},{"id":"6","name":"Lab 4 - Operate\r","content":"<h2 id=\"lab4operate\">Lab 4 - Operate</h2>\n<p>In order to do more with less and scale, organizations must transcend IT silos, foster collaboration and improve productivity. Automation and a common data model are key components of this, but it takes platforms that support operational teams and workflows.</p>\n<h2 id=\"objectivesofthislab\">Objectives of this Lab</h2>\n<p>🔷 Review how Dynatrace integrates with <a href=\"https://azure.microsoft.com/en-us/services/monitor/\">Azure monitor</a></p>\n<p>🔷 Review how Azure monitor metrics can be configured as <a href=\"https://www.dynatrace.com/support/help/how-to-use-dynatrace/problem-detection-and-analysis/problem-detection/metric-events-for-alerting/\">Metric events for alerts</a></p>\n<p>🔷 Examine Dynatrace Service Level Objectives (SLOs)</p>\n<p>🔷 Create a custom dashboard with SLOs </p>\n<p>🏫<strong>Class Note</strong> - Please update the Tracking Spreadsheet if you've completed the task on this step.</p>","activityList":[{"id":"6.1","name":"Overview - Azure Monitor Setup\r","content":"<h2 id=\"overviewazuremonitorsetup\">Overview - Azure Monitor Setup</h2>\n<p>Referring to the picture below, here are the components for this lab.</p>\n<p><img src=\"assets/lab3-setup.png\" alt=\"image\" /></p>\n<p><strong>#1 . Azure</strong></p>\n<p>Azure cloud platform where Azure services produce metrics that are sent to Azure monitor.</p>\n<p><strong>#2 . Azure VM running ActiveGate</strong></p>\n<p>A <a href=\"https://www.dynatrace.com/support/help/setup-and-configuration/dynatrace-activegate/basic-concepts/when-do-i-need-to-install-an-activegate/#anchor-route\" target=\"_blank\"> Dynatrace ActiveGate </a> process required to monitor Azure monitor data. </p>\n<p><strong>#3 . Dynatrace</strong></p>\n<p>Dynatrace tenant where monitoring data is collected and analyzed.</p>\n<p><strong>#4 . Dynatrace Azure Dashboard</strong></p>\n<p>Out of the box dashboard for each configured Azure subscription.</p>\n<h2 id=\"azuredashboard\">Azure Dashboard</h2>\n<p>In addition to monitoring your Azure workloads using OneAgent, Dynatrace provides integration with <a href=\"https://docs.microsoft.com/en-us/azure/azure-monitor/overview\" target=\"_blank\"> Azure Monitor </a> which adds infrastructure monitoring to gain insight even into serverless application scenarios.</p>\n<p>The integration uses Azure Monitor metrics for service insights, as well as Azure Resource Manager (ARM) to gather metadata.</p>\n<p><img src=\"assets/lab3-azure-dashboard.png\" alt=\"image\" /></p>\n<h2 id=\"reviewyourenvironment\">Review your environment</h2>\n<ol>\n<li>From the left side menu in Dynatrace, click the <code>Azure</code> menu item.</li>\n<li>Scroll down, and in the <code>Environment dynamics</code> action click on the <code>eastus</code> region to open the virtual machine regional page  </li>\n</ol>\n<h3 id=\"virtualmachineregionalpage\">Virtual machine regional page</h3>\n<p>Notice the following details:</p>\n<ol>\n<li>A summary of type and status is shown</li>\n<li>A running average for virtual machines</li>\n<li>A table of host with Azure monitor metrics summarized.  Notice that both VMs with and without an OneAgent are both shown</li>\n</ol>\n<p><img src=\"assets/lab3-host-list.png\" alt=\"image\" /></p>\n<h3 id=\"virtualmachinedetails\">Virtual machine details</h3>\n<p>Click on the <code>dt-orders-active-gate</code> host to open the host page.</p>\n<p>Notice the following details:</p>\n<ol>\n<li>Expand the properties to see more details</li>\n<li>All the Azure monitor metrics are viewable as time-series data</li>\n</ol>\n<p><img src=\"assets/lab3-host-detail.png\" alt=\"image\" /></p>\n<h3 id=\"technicalnote\">💥 <strong>TECHNICAL NOTE</strong></h3>\n<p>See the <a href=\"https://www.dynatrace.com/support/help/technology-support/cloud-platforms/microsoft-azure-services/set-up-integration-with-azure-monitor/\">Dynatrace Docs</a> for more details on the setup.</p>\n<h2 id=\"howthishelps\">👍 How this helps</h2>\n<p>Dynatrace brings value by enriching the data from Azure Monitor/App Insights and extending observability into the platform with additional metrics for cloud infrastructure, load balancers, API Management Services, and more.​</p>\n<p>These metrics are managed by Dynatrace's AI engine automatically and this extended observability improves operations, reduces MTTR and increases innovation. </p>","activityList":[]},{"id":"6.2","name":"Custom Alerting\r","content":"<h2 id=\"customalerting\">Custom Alerting</h2>\n<p>Dynatrace Davis automatically analyzes abnormal situations within your IT infrastructure and attempts to identify any relevant impact and root cause. Davis relies on a wide spectrum of information sources, such as a transactional view of your services and applications, as well as on events raised on individual nodes within your Smartscape topology.</p>\n<p>There are two main sources for single events in Dynatrace:</p>\n<ul>\n<li>Metric-based events (events that are triggered by a series of measurements) and\nevents that are independent of any metric (for example, process crashes, deployment changes, and VM motion events)</li>\n<li>Custom metric events are configured in the global settings of your environment and are visible to all Dynatrace users in your environment.</li>\n</ul>\n<h2 id=\"taskstocompletethisstep\">Tasks to complete this step</h2>\n<p><details><summary>Task 1 - Setup Custom Events for Alerting</summary></p>\n<p>1 . To add custom alerts, navigate to <code>Settings --&gt; Anomaly Detection --&gt; Custom Events for Alerting</code> menu. </p>\n<p>2 . Click the <code>Create custom event for alerting</code> button.</p>\n<p><img src=\"assets/lab3-alert-create.png\" alt=\"image\" /></p>\n<p>3 . In the <code>Category</code> dropdown list, select <code>Cloud Platform</code> and in the <code>Metric</code> dropdown list, type <code>Percentage CPU</code> and pick the <code>Cloud platforms &gt; Azure &gt; Virtual Machine &gt; cpuUsage</code> option and Pick <code>Average</code></p>\n<p><img src=\"assets/lab3-vm-alert.png\" alt=\"image\" /></p>\n<p>4 . Click <code>Add rule-base</code> button and update as shown below</p>\n<p><img src=\"assets/lab4-custom-alert-filter.png\" alt=\"image\" /></p>\n<p>5 . Choose <code>Static threshold</code> and update as shown below</p>\n<p><img src=\"assets/lab4-custom-alert-threashold.png\" alt=\"image\" /></p>\n<p>6 . Add the <code>Event Description</code> to have the <code>title</code> and <code>severity = CUSTOM ALERT</code> as shown below.</p>\n<p><img src=\"assets/lab4-custom-alert-message.png\" alt=\"image\" /></p>\n<p>Notice the <code>Alert preview</code> chart that helps you in reviewing these settings</p>\n<p><img src=\"assets/lab3-vm-alert-chart.png\" alt=\"image\" /></p>\n<p>7 . Save your changes</p>\n<p>8 . Add another rule, with everything the same, except for the <code>Event Description</code> to have the <code>title</code> and <code>severity = RESOURCE</code> as shown below.</p>\n<p><img src=\"assets/lab4-custom-resource-message.png\" alt=\"image\" /></p>\n<p>9 . Save your changes and the list should look as shown below.</p>\n<p><img src=\"assets/lab4-custom-alert-list.png\" alt=\"image\" /></p>\n<p></details>\n<details><summary>Task 2 - Trigger a CPU Problem</summary>\nTo enable a problem, you will SSH into a VM and run the <a href=\"https://en.wikipedia.org/wiki/Yes_(Unix)\">yes</a> utility in the background that will cause high CPU.  </p>\n<ol>\n<li>From the Azure shell, SSH to the monolith virtual machine with this command:</li>\n</ol>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">cd</span> ~<span class=\"hljs-string\">/azure-modernization-dt-orders-setup/learner-scripts</span>\n<span class=\"hljs-string\">./show-app-urls.sh</span>\n</code></pre>\n<p>Using the IP address for the MONOLITH host, run this command:</p>\n<pre><code class=\"hljs\">ssh <span class=\"hljs-symbol\">workshop@<span class=\"hljs-keyword\">&lt;PUBLIC-IP&gt;</span></span>\n</code></pre>\n<p><strong>NOTE: Ask instructor for password</strong></p>\n<ol start=\"2\">\n<li>Once SSH session is established, copy all these lines and run them:</li>\n</ol>\n<pre><code class=\"hljs\">yes &gt; <span class=\"hljs-regexp\">/dev/</span><span class=\"hljs-literal\">null</span> &amp;\nyes &gt; <span class=\"hljs-regexp\">/dev/</span><span class=\"hljs-literal\">null</span> &amp;\nyes &gt; <span class=\"hljs-regexp\">/dev/</span><span class=\"hljs-literal\">null</span> &amp;\n</code></pre>\n<p>To verify, run this command:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-attribute\">ps</span> -ef | grep <span class=\"hljs-literal\">yes</span>\n</code></pre>\n<p>The output should look like this:</p>\n<pre><code class=\"hljs\">azureuser:~$ <span class=\"hljs-literal\">yes</span> &gt; /dev/<span class=\"hljs-literal\">null</span> &amp;\n[1] 138465\nazureuser:~$ <span class=\"hljs-literal\">yes</span> &gt; /dev/<span class=\"hljs-literal\">null</span> &amp;\n[2] 138488\nazureuser:~$ <span class=\"hljs-literal\">yes</span> &gt; /dev/<span class=\"hljs-literal\">null</span> &amp;\n[3] 138495\n\nazureuser:~$ ps -ef | grep <span class=\"hljs-literal\">yes</span>\nazureuser  138465  137535 81 20:54 pts/2    00:00:03 <span class=\"hljs-literal\">yes</span>\nazureuser  138488  137535 80 20:54 pts/2    00:00:02 <span class=\"hljs-literal\">yes</span>\nazureuser  138495  137535 95 20:55 pts/2    00:00:01 <span class=\"hljs-literal\">yes</span>\nazureuser  138573  137535  0 20:55 pts/2    00:00:00 grep <span class=\"hljs-attribute\">--color</span>=auto <span class=\"hljs-literal\">yes</span>\n</code></pre>\n<p></details>\n<details><summary>Task 3 - Review Dynatrace UI for Problem card</summary></p>\n<ol>\n<li>Back in Dynatrace within the <code>host</code> view, the CPU should now be high as shown below</li>\n</ol>\n<p><img src=\"assets/lab4-cpu.png\" alt=\"image\" /></p>\n<ol>\n<li>It may take a minute or so, but you will get two problem cards as shown below.  #1 is the alert from the <code>severity = RESOURCE</code> where Davis was invoked, and #2 is the alert from <code>severity = CUSTOM ALERT</code>.</li>\n</ol>\n<p><img src=\"assets/lab4-custom-alert-problems.png\" alt=\"image\" /></p>\n<h3 id=\"technicalnote\">💥 <strong>TECHNICAL NOTE</strong></h3>\n<ul>\n<li><p>See the <a href=\"https://www.dynatrace.com/support/help/how-to-use-dynatrace/problem-detection-and-analysis/problem-detection/metric-events-for-alerting/\" target=\"_blank\"> Dynatrace Docs </a> for more details on the setup.</p></li>\n<li><p>Alert configuration is available through the <a href=\"https://www.dynatrace.com/support/help/dynatrace-api/configuration-api/anomaly-detection-api/anomaly-detection-api-metric-events/\" target=\"_blank\"> Anomaly detection—metric events API </a> Using the API, you can list, update, create, and delete configurations.</p></li>\n</ul>\n<h2 id=\"reviewproblemnotifications\">Review Problem Notifications</h2>\n<p>1 . Navigate to <code>Settings --&gt; Integrations --&gt; Problem Notifications</code> </p>\n<p>2 . Read the overview and then click the <code>Add Notification</code> button</p>\n<p>3 . Click various <code>Notification types</code> from the drop down to review the configurations inputs.</p>\n<p>4 . For the <code>Custom integration</code> type, review the option to customize the payload.</p>\n<p>5 . Notice how you can choose the <code>Alert profile</code>, but you only have default as an option currently</p>\n<h2 id=\"reviewalertingprofiles\">Review Alerting Profiles</h2>\n<p>1 . Navigate to <code>Settings --&gt; Alerting --&gt; Alerting profiles</code></p>\n<p>2 . Read the overview and then expand the <code>default</code> rule.</p>\n<p>3 . Now add one, by clicking on the <code>Add alerting profile</code> button</p>\n<p>4 . Review the options to choose severity rules and filters</p>\n<p></details>\n<details><summary>Task 4 - Stop the CPU problem</summary>\nTo stop the problem, you need to <code>kill</code> the processes.  To do this:</p>\n<ol>\n<li>Run this command to get the process IDs:</li>\n</ol>\n<pre><code class=\"hljs\"><span class=\"hljs-attribute\">ps</span> -ef | grep <span class=\"hljs-literal\">yes</span>\n</code></pre>\n<ol start=\"2\">\n<li>For each process, copy the process ID and run </li>\n</ol>\n<pre><code class=\"hljs\">kill <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">PID</span>&gt;</span>\n</code></pre>\n<p>For example:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\"># If output is this...</span>\n\n<span class=\"hljs-attribute\">azureuser</span>:~$ ps -ef | grep yes\n<span class=\"hljs-attribute\">azureuser</span>  <span class=\"hljs-number\">138465</span>  <span class=\"hljs-number\">137535</span> <span class=\"hljs-number\">81</span> <span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">54</span> pts/<span class=\"hljs-number\">2</span>    <span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">03</span> yes\n<span class=\"hljs-attribute\">azureuser</span>  <span class=\"hljs-number\">138488</span>  <span class=\"hljs-number\">137535</span> <span class=\"hljs-number\">80</span> <span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">54</span> pts/<span class=\"hljs-number\">2</span>    <span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">02</span> yes\n<span class=\"hljs-attribute\">azureuser</span>  <span class=\"hljs-number\">138495</span>  <span class=\"hljs-number\">137535</span> <span class=\"hljs-number\">95</span> <span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">55</span> pts/<span class=\"hljs-number\">2</span>    <span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">01</span> yes\n\n<span class=\"hljs-comment\"># Then run...</span>\n\n<span class=\"hljs-attribute\">kill</span> <span class=\"hljs-number\">138465</span>\n<span class=\"hljs-attribute\">kill</span> <span class=\"hljs-number\">138488</span>\n<span class=\"hljs-attribute\">kill</span> <span class=\"hljs-number\">138495</span>\n</code></pre>\n<ol start=\"3\">\n<li>Verify they are gone by running this again:</li>\n</ol>\n<pre><code class=\"hljs\"><span class=\"hljs-attribute\">ps</span> -ef | grep <span class=\"hljs-literal\">yes</span>\n</code></pre>\n<ol start=\"4\">\n<li><p>Verify that CPU in Dynatrace goes to normal and the problems will eventually automatically close</p></li>\n<li><p>To exit the SSH session, run…</p></li>\n</ol>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">exit</span>\n</code></pre>\n<p></details></p>\n<p>🏫<strong>Class Note</strong> - Please update the Tracking Spreadsheet if you've completed the task on this step.</p>","activityList":[]},{"id":"6.3","name":"SLOs\r","content":"<h2 id=\"slos\">SLOs</h2>\n<p>Dynatrace provides all the necessary real-time information that your Site-Reliability Engineering (SRE) teams need to monitor their defined objectives.</p>\n<p>An SRE team is responsible for finding good service-level indicators (SLIs) for a given service in order to closely monitor the reliable delivery of that service. SLIs can differ from one service to another, as not all services are equally critical in terms of time and error constraints.</p>\n<p>Dynatrace offers more than 2000 different metrics that are ready for use as dedicated SLIs.</p>\n<p>Each Service Level Objective (SLO) definition can be evaluated by following two result metrics:</p>\n<ul>\n<li><p><strong>SLO status:</strong> The current evaluation result of the SLO, expressed as a percentage. The semantics of this percentage (for example, 99.3% of all service requests are successful, or 99.99% of all website users are “satisfied” in terms of Apdex rating) and the target defined for this percentage are up to the SRE team.</p></li>\n<li><p><strong>SLO error budget:</strong> The remaining buffer until the defined SLO target is considered as failed. For example, if an SLO defines a 95% target and its current SLO status is evaluated as 98%, the remaining error budget is the difference between the SLO status and the SLO target.\nTwo SLOs were created for you, so review those.</p></li>\n</ul>\n<p>Here is an example custom dashboard with SLO dashboard tiles.</p>\n<p><img src=\"assets/lab2-slo-dashboard.png\" alt=\"image\" /></p>\n<h2 id=\"taskstocompletethisstep\">Tasks to complete this step</h2>\n<p><details><summary>Task - Review SLO's are deployed</summary></p>\n<p>From the left menu in Dynatrace, click the <code>Service Level Objective</code> option to review the two SLOs that are already setup.  Edit one of them to review the configuration.</p>\n<p><img src=\"assets/lab2-slo-list.png\" alt=\"image\" /></p>\n<h2 id=\"howthishelps\">👍 How this helps</h2>\n<p>You can review the current health status, error budgets, targets and warnings, along with the timeframe of all your SLOs on the SLOs overview page.</p>\n<p>Davis provides quick notifications on anomalies detected, along with actionable root causes. If your SLO has turned red, this is most likely because Davis has already raised a problem for the underlying metrics, showing you the root cause.</p>\n<h3 id=\"technicalnote\">💥 <strong>TECHNICAL NOTE</strong></h3>\n<p>See the <a href=\"https://www.dynatrace.com/support/help/how-to-use-dynatrace/service-level-objectives/\" target=\"_blank\"> Dynatrace Docs </a> for more details on SLOs\n</details></p>","activityList":[]},{"id":"6.4","name":"Create SLO Dashboard\r","content":"<h2 id=\"createslodashboard\">Create SLO Dashboard</h2>\n<p>In this step we'll create a very basic SLO dashboard to compare the before and after migration SLO's we've defined for our Monolith and Kubernetes service.</p>\n<h2 id=\"taskstocompletethisstep\">Tasks to complete this step</h2>\n<p><details><summary>Task 1 - Create Dashboard</summary>\nFrom the left side menu in Dynatrace, pick the <code>dashboard</code> menu.</p>\n<p>On the dashboard page, click the <code>new dashboard</code> button.</p>\n<p><img src=\"assets/lab2-dashboard.png\" alt=\"image\" /></p>\n<p>Provide a dashboard name like <code>Cloud Migration Success</code></p>\n<p>On the blank dashboard page, click the settings.  Then click the <code>advanced settings</code> link to open then settings page</p>\n<p><img src=\"assets/lab2-dashboard-settings.png\" alt=\"image\" /></p>\n<p>Referring to this picture, follow these steps:</p>\n<ol>\n<li>On the settings page, click the <code>dashboard JSON</code> menu.</li>\n<li>Copy and paste the following Json content from this file into your dashboard JSON, replacing the existing JSON in the process:<ul>\n<li><a href=\"https://raw.githubusercontent.com/dt-alliances-workshops/azure-modernization-dt-orders-setup/master/learner-scripts/cloud-modernization-dashboard.json\" target=\"_blank\"> Dashboard JSON file Link</a></li></ul></li>\n<li>You <strong>MUST</strong> replace the <code>owner</code> field to be the email that you logged into Dynatrace with or you will not be able to view it.</li>\n</ol>\n<p><img src=\"assets/lab2-dashboard-json.png\" alt=\"image\" /></p>\n<p>After you edit the email, then click the <code>Revert Dashboard ID</code> button.  After you click the <code>Revert Dashboard ID</code> button, click the <code>Save changes</code> button.</p>\n<p><img src=\"assets/lab3-save-dashboard.png\" alt=\"image\" /></p>\n<h2 id=\"viewdashboard\">View Dashboard</h2>\n<p>Click the <code>Cloud Migration Success</code> breadcrumb menu to go back to the dashboard page</p>\n<p><img src=\"assets/lab2-dashboard-bread.png\" alt=\"image\" /></p>\n<p>You should now see the dashboard</p>\n<p><img src=\"assets/lab2-dashboard-view.png\" alt=\"image\" /></p>\n<h2 id=\"editdashboard\">Edit Dashboard</h2>\n<p>Now you need to edit the dashboard and adjust the tiles with the SLOs and databases in your environment.</p>\n<p>On the top right of the page, click the <code>edit</code> button and then follow these steps:</p>\n<h3 id=\"editdynamicrequeststile\">Edit Dynamic requests tile</h3>\n<ol>\n<li>Click on the title of the Dynamic requests tile to open the Service properties window on the right side </li>\n<li>On the Service properties window, pick the monolith <code>frontend (monolith-frontend)</code> service</li>\n<li>Click the <code>Done</code> button</li>\n</ol>\n<p><img src=\"assets/lab2-dashboard-edit-tile.png\" alt=\"image\" /></p>\n<h3 id=\"editremainingtiles\">Edit remaining tiles</h3>\n<ol>\n<li>Repeat the same steps above for the Cloud services tile, but pick the <code>staging- frontend</code> in the Service properties window</li>\n<li>Repeat for the two SLO tiles, but pick the associated SLO from the drop down list in the SLO properties window</li>\n<li>Repeat for the two database tiles. For Cloud services application there are 3 databases, so just pick one of the database of a demo.</li>\n<li>Click the <code>Done</code> button to save the dashboard\n</details></li>\n</ol>\n<p>🏫<strong>Class Note</strong> - Please update the Tracking Spreadsheet if you've completed the task on this step.</p>","activityList":[]},{"id":"6.5","name":"Summary\r","content":"<h2 id=\"summary\">Summary</h2>\n<p>In this section, you should have completed the following:</p>\n<p>🔷 Review how Dynatrace integrates with <a href=\"https://azure.microsoft.com/en-us/services/monitor/\">Azure monitor</a></p>\n<p>🔷 Review how Azure monitor metrics can be configured as <a href=\"https://www.dynatrace.com/support/help/how-to-use-dynatrace/problem-detection-and-analysis/problem-detection/metric-events-for-alerting/\" target=\"_blank\"> Metric events for alerts</a></p>\n<p>🔷 Examine Dynatrace Service Level Objectives (SLOs)</p>\n<p>🔷 Create a custom dashboard with SLOs </p>\n<p>🏫<strong>Class Note</strong> - Please update the Tracking Spreadsheet if you've completed the task on this step.</p>","activityList":[]}]},{"id":"7","name":"Workshop Cleanup\r","content":"<h2 id=\"workshopcleanup\">Workshop Cleanup</h2>\n<p>If you plan to keep things running so you can examine the workshop a bit more please remember to do the cleanup when you are done. So, when you are ready, run this command to remove the Azure resources and Dynatrace configuration:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">cd</span> ~<span class=\"hljs-string\">/azure-modernization-dt-orders-setup/provision-scripts</span>\n<span class=\"hljs-string\">./cleanup-workshop.sh</span>\n</code></pre>\n<p>The start of the script output will look like this:</p>\n<pre><code class=\"hljs\">===================================================================\nAbout to Delete Workshop resources\n===================================================================\nProceed? (y/n) : y\n\n==========================================\nDeleting workshop resources\nStarting: Fri 07 May 2021 04:35:46 AM UTC\n==========================================\n<span class=\"hljs-bullet\">...\n</span><span class=\"hljs-bullet\">...\n</span></code></pre>\n<p>Eventually when it completes - plan for 5-10 minutes - it will look like this:</p>\n<pre><code class=\"hljs\">=============================================\nDeleting workshop resources COMPLETE\nEnd: Fri 07 May 2021 04:40:40 AM UTC\n=============================================\n</code></pre>\n<h2 id=\"usedynatracetotrysomeofyourapplications\">Use Dynatrace to try some of your applications</h2>\n<p>You have a fully feature enabled 15 day Dynatrace trial, so keep using it to monitor and manage your infrastructure and applications!!</p>\n<p>Here are resources to get your started:</p>\n<ul>\n<li><a href=\"https://www.dynatrace.com/support/help/get-started/get-started-with-dynatrace-saas/\">Learn more about your tenant and install more OneAgents</a></li>\n<li><a href=\"https://www.dynatrace.com/support/help/how-to-use-dynatrace/user-management-and-sso/manage-groups-and-permissions/\">Add other users to your tenant</a></li>\n<li><a href=\"https://www.youtube.com/channel/UCcYJ-5q_AfmjQ4XTjTS0o3g\">YouTube Videos</a></li>\n<li><a href=\"https://www.dynatrace.com/services-support/#support-resources-section\">More Support resources</a></li>\n</ul>","activityList":[]}]